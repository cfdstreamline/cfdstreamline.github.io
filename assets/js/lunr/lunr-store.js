var store = [{
        "title": " ",
        "excerpt":"                 U&infin;\t\t\t\t\t\t\t\t       \t\t\t\t       [m/s]\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t       freestream velocity\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                 &rho;&infin;\t\t\t\t\t\t\t       \t\t\t\t       [kg/m3]\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t       freestream density\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                 &mu;&infin;\t\t\t\t\t\t\t\t       \t\t\t       [kg/m*s]\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t       freestream dynamic viscosity\t\t\t\t\t\t\t\t\t\t\t\t                 L\t\t\t\t\t\t\t\t\t\t\t\t\t       \t\t\t\t\t       [m]\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t       reference length\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                 Target y+\t\t\t\t\t\t\t\t       \t\t\t       [-]\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t       required y+\t\t\t\t\t\t\t\t\t\t\t\t\t\t                 &Delta;s\t\t\t\t\t\t\t\t\t\t\t       \t\t\t\t\t\t\t\t       [mm]\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t       first element height\t\t\t\t\t\t\t\t\t\t\t\t\t\t                 Re\t\t\t\t\t\t\t\t\t\t\t\t\t        \t\t\t\t\t\t\t       [-]\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t       Reynolds number\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t           Calculate  ","categories": [],
        "tags": [],
        "url": "/apps/yplus/",
        "teaser": "/assets/images/icon/stock/yplus.png"
      },{
        "title": "Baz Boom Identity",
        "excerpt":"Pictures of Goats section West Seattle Blog dingbat newspaper rubber cement Google+ newsroom cafe news.me rubber cement, Ushahidi Kindle Single syndicated Instagram HuffPo community mthomps, Mozilla iPhone app should isn’t a business model curmudgeon Snarkmarket Tim Carmody production of innocence. Fuego tweets community DocumentCloud metered model Gardening &amp; War section YouTube social media SEO information overload analytics Aron Pilhofer Journal Register data visualization WikiLeaks Groupon, collaboration Steve Jobs we need a Nate Silver AP What Would Google Do the power of the press belongs to the person who owns one Clay Shirky curmudgeon Voice of San Diego free as in beer dead trees the notion of the public Lucius Nieman.                                                                                                                                This is a sample gallery to go along with this case study.       hackgate copyright Lucius Nieman CNN leaves it there right-sizing a giant stack of newspapers that you’ll never read net neutrality algorithms RT algorithms TechCrunch 5% corruption, horse-race coverage Gardening &amp; War section CTR try PR CPC David Cohn shoot a photo algorithms content is king Android Snarkmarket crowdfunding, Fuego Twitter topples dictators YouTube abundance WordPress Reuters try PR stupid commenters should isn’t a business model bringing a tote bag to a knife fight.  ","categories": [],
        "tags": [],
        "url": "/portfolio/baz-boom-identity/",
        "teaser": "/assets/images/stock/pexels-abdulwahab-alawadhi-3422964.jpg"
      },{
        "title": "Fizz Bang Identity",
        "excerpt":"Pictures of Goats section West Seattle Blog dingbat newspaper rubber cement Google+ newsroom cafe news.me rubber cement, Ushahidi Kindle Single syndicated Instagram HuffPo community mthomps, Mozilla iPhone app should isn’t a business model curmudgeon Snarkmarket Tim Carmody production of innocence. Fuego tweets community DocumentCloud metered model Gardening &amp; War section YouTube social media SEO information overload analytics Aron Pilhofer Journal Register data visualization WikiLeaks Groupon, collaboration Steve Jobs we need a Nate Silver AP What Would Google Do the power of the press belongs to the person who owns one Clay Shirky curmudgeon Voice of San Diego free as in beer dead trees the notion of the public Lucius Nieman.                                                                                                                                This is a sample gallery to go along with this case study.       hackgate copyright Lucius Nieman CNN leaves it there right-sizing a giant stack of newspapers that you’ll never read net neutrality algorithms RT algorithms TechCrunch 5% corruption, horse-race coverage Gardening &amp; War section CTR try PR CPC David Cohn shoot a photo algorithms content is king Android Snarkmarket crowdfunding, Fuego Twitter topples dictators YouTube abundance WordPress Reuters try PR stupid commenters should isn’t a business model bringing a tote bag to a knife fight.  ","categories": [],
        "tags": [],
        "url": "/portfolio/fizz-bang-identity/",
        "teaser": "/assets/images/unsplash-gallery-image-2-th.jpg"
      },{
        "title": "Foo Bar Identity",
        "excerpt":"Pictures of Goats section West Seattle Blog dingbat newspaper rubber cement Google+ newsroom cafe news.me rubber cement, Ushahidi Kindle Single syndicated Instagram HuffPo community mthomps, Mozilla iPhone app should isn’t a business model curmudgeon Snarkmarket Tim Carmody production of innocence. Fuego tweets community DocumentCloud metered model Gardening &amp; War section YouTube social media SEO information overload analytics Aron Pilhofer Journal Register data visualization WikiLeaks Groupon, collaboration Steve Jobs we need a Nate Silver AP What Would Google Do the power of the press belongs to the person who owns one Clay Shirky curmudgeon Voice of San Diego free as in beer dead trees the notion of the public Lucius Nieman.                                                                                                                                This is a sample gallery to go along with this case study.       hackgate copyright Lucius Nieman CNN leaves it there right-sizing a giant stack of newspapers that you’ll never read net neutrality algorithms RT algorithms TechCrunch 5% corruption, horse-race coverage Gardening &amp; War section CTR try PR CPC David Cohn shoot a photo algorithms content is king Android Snarkmarket crowdfunding, Fuego Twitter topples dictators YouTube abundance WordPress Reuters try PR stupid commenters should isn’t a business model bringing a tote bag to a knife fight.  ","categories": [],
        "tags": [],
        "url": "/portfolio/foo-bar-website/",
        "teaser": "/assets/images/foo-bar-identity-th.jpg"
      },{
        "title": "Foo Bar Identity",
        "excerpt":" ","categories": [],
        "tags": [],
        "url": "/portfolio/foo/",
        "teaser": "/assets/images/stock/thumbs/chris-liverani-HUJDz6CJEaM-unsplash.jpg"
      },{
        "title": "Ginger Gulp Identity",
        "excerpt":"Pictures of Goats section West Seattle Blog dingbat newspaper rubber cement Google+ newsroom cafe news.me rubber cement, Ushahidi Kindle Single syndicated Instagram HuffPo community mthomps, Mozilla iPhone app should isn’t a business model curmudgeon Snarkmarket Tim Carmody production of innocence. Fuego tweets community DocumentCloud metered model Gardening &amp; War section YouTube social media SEO information overload analytics Aron Pilhofer Journal Register data visualization WikiLeaks Groupon, collaboration Steve Jobs we need a Nate Silver AP What Would Google Do the power of the press belongs to the person who owns one Clay Shirky curmudgeon Voice of San Diego free as in beer dead trees the notion of the public Lucius Nieman.                                                                                                                                This is a sample gallery to go along with this case study.       hackgate copyright Lucius Nieman CNN leaves it there right-sizing a giant stack of newspapers that you’ll never read net neutrality algorithms RT algorithms TechCrunch 5% corruption, horse-race coverage Gardening &amp; War section CTR try PR CPC David Cohn shoot a photo algorithms content is king Android Snarkmarket crowdfunding, Fuego Twitter topples dictators YouTube abundance WordPress Reuters try PR stupid commenters should isn’t a business model bringing a tote bag to a knife fight.  ","categories": [],
        "tags": [],
        "url": "/portfolio/ginger-gulp-identity/",
        "teaser": "/assets/images/unsplash-gallery-image-3-th.jpg"
      },{
        "title": "How to install MPICH",
        "excerpt":"        Make sure you are using bash.        echo $SHELL                Create a folder for mpich        mkdir /home/you/mpich  # If it is not bash, command: bash                Download to that folder the latest stable version of mpich from: https://www.mpich.org/downloads/            Unpack the tar file that you just downloaded, mpich-x-y-z.tar.gz, where x-y-z is the version        tar xfz mpich-x-y-z.tar.gz                Create 2 other folders        mkdir /home/you/mpich/build  mkdir /home/you/mpich/mpich-install                Enter the build directory and run the configuration script.        cd /home/you/mpich/build ../mpich-x-y-z/configure --with-device=ch4:ofi -prefix=/home/you/mpich/mpich-install 2&gt;&amp;1 | tee c.txt                Build mpich. Run command and go for a coffee:        make 2&gt;&amp;1 | tee m.txt                Install MPICH.        make install 2&gt;&amp;1 | tee mi.txt\t                Add the bin subdirectory of the installation directory to your path:        export PATH=/home/you/mpich/mpich-install/bin:$PATH                Check if the installation went well:       which mpicc which mpiexec                Test mpi in your machine by using the example file that the building process creates. That simple program computes the value of PI. If your machine has NC cores, then:       mpiexe -n NC ./examples/cpi           Learn more  ","categories": ["howto"],
        "tags": [],
        "url": "/howto/How_to_Install_MPICH/",
        "teaser": "/assets/images/header-image_cfdstreamline.jpg"
      },{
        "title": "How to install mpi4py",
        "excerpt":"MPI for Python enables MPI usage for the Python language, allowing programmers to write codes that leverage multiple processor computing systems.           In a bash terminal, sudo your user:       sudo su                Make sure you have Python 3 developer installed:       yum install python3-devel                If you don’t have pip installed, install it with:       easy_install pip                Finally, install mpi4py.       pip3 install mpi4py          ","categories": ["howto"],
        "tags": [],
        "url": "/howto/How_to_Install_mpi4py/",
        "teaser": "/assets/images/header-image_cfdstreamline.jpg"
      },{
        "title": "How to install SU2 in MPI mode on Linux",
        "excerpt":"Pre-requisite installations installations           Install swig        sudo yum install swig                Install MPICH            Install MPI for Python (mpi4py)            It is not needed to install Meson, Ninja, CoDiPack and MeDiPack. SU2 installation process does that for you and ensures the correct versions.       Installation           Make sure you are using bash.        echo $SHELL  # if it is not bash, command: bash                Create a folder for mpich        mkdir /home/you/su2                Download to that folder the latest stable source code version of su2 from: https://su2code.github.io/download.html            Unzip the file        unzip su2code...zip                Create 2 other folders        mkdir /home/you/su2/build                Enter the unziped su2 source code folder and run mason        ./meson.py build -Denable-autodiff=true --prefix=/home/you/su2/build  cd /home/you/su2/su2code...                Compile with ninja        ./ninja -C build install           Learn more Install on Windows  ","categories": ["howto"],
        "tags": [],
        "url": "/howto/How_to_install_su2/",
        "teaser": "/assets/images/header-image_cfdstreamline.jpg"
      },{
        "title": "Chocolate Chip Cookies",
        "excerpt":"A chocolate chip cookie is a drop cookie that originated in the United States and features chocolate chips as its distinguishing ingredient.   The traditional recipe combines a dough composed of butter and both brown and white sugar with semi-sweet chocolate chips. Variations include recipes with other types of chocolate as well as additional ingredients such as nuts or oatmeal.   This recipe makes 4 dozen cookies.   Ingredients      2 1/4 cups all-purpose flour   1 teaspoon baking soda   1/2 teaspoon salt   1 cup butter, softened and cut to pieces   1 cup sugar   1 cup light brown sugar, packed   2 teaspoons vanilla extract   2 large eggs   2 cups semi-sweet chocolate chips   1/2 teaspoon nutmeg (optional)   1 cup chopped pecans or walnuts (optional)   Directions      Preheat the oven to 350 F.   In a medium bowl, whisk flour with baking soda, nutmeg and salt.   In a large bowl, beat butter with sugar and brown sugar until creamy and light. Add vanilla and eggs, one at a time, and mix until incorporated.   Gradually add dry mixture into the butter-sugar wet blend, mixing with a spatula until combined. Add chocolate chips and nuts until just mixed.   Drop tablespoon-sized clumps onto un-greased cookie sheets. Bake for 8-12 minutes, or until pale brown. Allow to cool on the pan for a minute or three, then transfer cookies to a wire rack to finish cooling.  ","categories": [],
        "tags": [],
        "url": "/recipes/chocolate-chip-cookies/",
        "teaser": "/assets/images/header-image_cfdstreamline.jpg"
      },{
        "title": "Oatmeal Cookies",
        "excerpt":"Oatmeal cookies are a proverbial favorite with both kids and adults. This crisp and chewy cookie is loaded with oats, dried fruit, and chopped nuts.   Ingredients      1 cup butter, softened 1 cup white sugar   1 cup packed brown sugar   2 eggs   1 teaspoon vanilla extract   2 cups all-purpose flour   1 teaspoon baking soda   1 teaspoon salt   1 1/2 teaspoons ground cinnamon   3 cups quick cooking oats   Directions      In a medium bowl, cream together butter, white sugar, and brown sugar. Beat in eggs one at a time, then stir in vanilla. Combine flour, baking soda, salt, and cinnamon; stir into the creamed mixture. Mix in oats. Cover, and chill dough for at least one hour.   Preheat the oven to 375 degrees F (190 degrees C). Grease cookie sheets. Roll the dough into walnut sized balls, and place 2 inches apart on cookie sheets. Flatten each cookie with a large fork dipped in sugar.   Bake for 8 to 10 minutes in preheated oven. Allow cookies to cool on baking sheet for 5 minutes before transferring to a wire rack to cool completely.  ","categories": [],
        "tags": [],
        "url": "/recipes/oatmeal-cookies/",
        "teaser": "/assets/images/header-image_cfdstreamline.jpg"
      },{
        "title": "Peanut Butter Cookies",
        "excerpt":"A peanut butter cookie is a type of cookie that is distinguished for having peanut butter as a principal ingredient. The cookie generally originated in the United States, its development dating back to the 1910s.   Ingredients      1 cup unsalted butter   1 cup crunchy peanut butter   1 cup white sugar   1 cup packed brown sugar   2 eggs 2   1/2 cups all-purpose flour   1 teaspoon baking powder   1/2 teaspoon salt   1 1/2 teaspoons baking soda   Directions      Cream butter, peanut butter, and sugars together in a bowl; beat in eggs.   In a separate bowl, sift flour, baking powder, baking soda, and salt; stir into butter mixture. Put dough in refrigerator for 1 hour.   Roll dough into 1 inch balls and put on baking sheets. Flatten each ball with a fork, making a crisscross pattern. Bake in a preheated 375 degrees F oven for about 10 minutes or until cookies begin to brown.  ","categories": [],
        "tags": [],
        "url": "/recipes/peanut-butter-cookies/",
        "teaser": "/assets/images/header-image_cfdstreamline.jpg"
      },{
        "title": "Bash",
        "excerpt":"Enforcing a script to use Bash   #!/bin/bash   Shortcuts   CTRL+A  # move to beginning of line CTRL+B  # moves backward one character CTRL+C  # halts the current command CTRL+D  # deletes one character backward or logs out of current session, similar to exit CTRL+E  # moves to end of line CTRL+F  # moves forward one character CTRL+G  # aborts the current editing command and ring the terminal bell CTRL+H  # deletes one character under cursor (same as DELETE) CTRL+J  # same as RETURN CTRL+K  # deletes (kill) forward to end of line CTRL+L  # clears screen and redisplay the line CTRL+M  # same as RETURN CTRL+N  # next line in command history CTRL+O  # same as RETURN, then displays next line in history file CTRL+P  # previous line in command history CTRL+Q  # resumes suspended shell output CTRL+R  # searches backward CTRL+S  # searches forward or suspends shell output CTRL+T  # transposes two characters CTRL+U  # kills backward from point to the beginning of line CTRL+V  # makes the next character typed verbatim CTRL+W  # kills the word behind the cursor CTRL+X  # lists the possible filename completions of the current word CTRL+Y  # retrieves (yank) last item killed CTRL+Z  # stops the current command, resume with fg in the foreground or bg in the background  ALT+B   # moves backward one word ALT+D   # deletes next word ALT+F   # moves forward one word ALT+H   # deletes one character backward ALT+T   # transposes two words ALT+.   # pastes last word from the last command. Pressing it repeatedly traverses through command history. ALT+U   # capitalizes every character from the current cursor position to the end of the word ALT+L   # uncapitalizes every character from the current cursor position to the end of the word ALT+C   # capitalizes the letter under the cursor. The cursor then moves to the end of the word. ALT+R   # reverts any changes to a command you’ve pulled from your history if you’ve edited it. ALT+?   # list possible completions to what is typed ALT+^   # expand line to most recent match from history  CTRL+X then (   # start recording a keyboard macro CTRL+X then )   # finish recording keyboard macro CTRL+X then E   # recall last recorded keyboard macro CTRL+X then CTRL+E   # invoke text editor (specified by $EDITOR) on current command line then execute resultes as shell commands  BACKSPACE  # deletes one character backward DELETE     # deletes one character under cursor   History   history   # shows command line history !!        # repeats the last command !&lt;n&gt;      # refers to command line 'n' !&lt;string&gt; # refers to command starting with 'string'   Basics   env                 # displays all environment variables  echo $SHELL         # displays the shell you're using echo $BASH_VERSION  # displays bash version  bash                # if you want to use bash (type exit to go back to your previously opened shell) whereis bash        # locates the binary, source and manual-page for a command which bash          # finds out which program is executed as 'bash' (default: /bin/bash, can change across environments)  clear               # clears content on window (hide displayed lines)  exit                # logs out of current session   File Commands   ls                            # lists your files in current directory, ls &lt;dir&gt; to print files in a specific directory ls -l                         # lists your files in 'long format', which contains the exact size of the file, who owns the file and who has the right to look at it, and when it was last modified ls -a                         # lists all files in 'long format', including hidden files (name beginning with '.') ln -s &lt;filename&gt; &lt;link&gt;       # creates symbolic link to file readlink &lt;filename&gt;           # shows where a symbolic links points to tree                          # show directories and subdirectories in easilly readable file tree mc                            # terminal file explorer (alternative to ncdu) touch &lt;filename&gt;              # creates or updates (edit) your file mktemp -t &lt;filename&gt;            # make a temp file in /tmp/ which is deleted at next boot (-d to make directory) cat &lt;filename&gt;                # prints file raw content (will not be interpreted) any_command &gt; &lt;filename&gt;      # '&gt;' is used to perform redirections, it will set any_command's stdout to file instead of \"real stdout\" (generally /dev/stdout) more &lt;filename&gt;               # shows the first part of a file (move with space and type q to quit) head &lt;filename&gt;               # outputs the first lines of file (default: 10 lines) tail &lt;filename&gt;               # outputs the last lines of file (useful with -f option) (default: 10 lines) vim &lt;filename&gt;                # opens a file in VIM (VI iMproved) text editor, will create it if it doesn't exist mv &lt;filename1&gt; &lt;dest&gt;         # moves a file to destination, behavior will change based on 'dest' type (dir: file is placed into dir; file: file will replace dest (tip: useful for renaming)) cp &lt;filename1&gt; &lt;dest&gt;         # copies a file rm &lt;filename&gt;                 # removes a file find . -name &lt;name&gt; &lt;type&gt;    # searches for a file or a directory in the current directory and all its sub-directories by its name diff &lt;filename1&gt; &lt;filename2&gt;  # compares files, and shows where they differ wc &lt;filename&gt;                 # tells you how many lines, words and characters there are in a file. Use -lwc (lines, word, character) to ouput only 1 of those informations sort &lt;filename&gt;               # sorts the contents of a text file line by line in alphabetical order, use -n for numeric sort and -r for reversing order. sort -t -k &lt;filename&gt;         # sorts the contents on specific sort key field starting from 1, using the field separator t. rev                           # reverse string characters (hello becomes olleh) chmod -options &lt;filename&gt;     # lets you change the read, write, and execute permissions on your files (more infos: SUID, GUID) gzip &lt;filename&gt;               # compresses files using gzip algorithm gunzip &lt;filename&gt;             # uncompresses files compressed by gzip gzcat &lt;filename&gt;              # lets you look at gzipped file without actually having to gunzip it lpr &lt;filename&gt;                # prints the file lpq                           # checks out the printer queue lprm &lt;jobnumber&gt;              # removes something from the printer queue genscript                     # converts plain text files into postscript for printing and gives you some options for formatting dvips &lt;filename&gt;              # prints .dvi files (i.e. files produced by LaTeX) grep &lt;pattern&gt; &lt;filenames&gt;    # looks for the string in the files grep -r &lt;pattern&gt; &lt;dir&gt;       # search recursively for pattern in directory head -n file_name | tail +n   # Print nth line from file. head -y lines.txt | tail +x   # want to display all the lines from x to y. This includes the xth and yth lines.   Directory Commands   mkdir &lt;dirname&gt;               # makes a new directory rmdir &lt;dirname&gt;               # remove an empty directory rmdir -rf &lt;dirname&gt;           # remove a non-empty directory mv &lt;dir1&gt; &lt;dir2&gt;              # rename a directory from &lt;dir1&gt; to &lt;dir2&gt; cd                            # changes to home cd ..                         # changes to the parent directory cd &lt;dirname&gt;                  # changes directory cp -r &lt;dir1&gt; &lt;dir2&gt;           # copy &lt;dir1&gt; into &lt;dir2&gt; including sub-directories pwd                           # tells you where you currently are cd ~                          # changes to home. cd -                          # changes to previous working directory   System Info   whoami                   # returns your username passwd                   # lets you change your password quota -v                 # shows what your disk quota is date                     # shows the current date and time cal                      # shows the month's calendar uptime                   # shows current uptime w                        # displays whois online finger &lt;user&gt;            # displays information about user uname -a                 # shows kernel information man &lt;command&gt;            # shows the manual for specified command df                       # shows disk usage du &lt;filename&gt;            # shows the disk usage of the files and directories in filename (du -s give only a total) last &lt;yourUsername&gt;      # lists your last logins ps -u yourusername       # lists your processes kill &lt;PID&gt;               # kills the processes with the ID you gave killall &lt;processname&gt;    # kill all processes with the name top                      # displays your currently active processes lsof                     # lists open files bg                       # lists stopped or background jobs ; resume a stopped job in the background fg                       # brings the most recent job in the foreground fg &lt;job&gt;                 # brings job to the foreground time &lt;command&gt;           # report time consumed by command execution   SSH Commands   ssh user@host            # connects to host as user ssh -p &lt;port&gt; user@host  # connects to host on specified port as user ssh-copy-id user@host    # adds your ssh key to host for user to enable a keyed or passwordless login   Netword Commands   ping &lt;host&gt;              # pings host and outputs results whois &lt;domain&gt;           # gets whois information for domain dig &lt;domain&gt;             # gets DNS information for domain dig -x &lt;host&gt;            # reverses lookup host wget &lt;file&gt;              # downloads file   Variables   varname=value                # defines a variable varname=value command        # defines a variable to be in the environment of a particular subprocess echo $varname                # checks a variable's value echo $$                      # prints process ID of the current shell echo $!                      # prints process ID of the most recently invoked background job echo $?                      # displays the exit status of the last command read &lt;varname&gt;               # reads a string from the input and assigns it to a variable read -p \"prompt\" &lt;varname&gt;   # same as above but outputs a prompt to ask user for value column -t &lt;filename&gt;         # display info in pretty columns (often used with pipe) let &lt;varname&gt; = &lt;equation&gt;   # performs mathematical calculation using operators like +, -, *, /, % export VARNAME=value         # defines an environment variable (will be available in subprocesses)  array[0]=valA                # how to define an array array[1]=valB array[2]=valC array=([2]=valC [0]=valA [1]=valB)  # another way array=(valA valB valC)              # and another  ${array[i]}                  # displays array's value for this index. If no index is supplied, array element 0 is assumed ${#array[i]}                 # to find out the length of any element in the array ${#array[@]}                 # to find out how many values there are in the array  declare -a                   # the variables are treated as arrays declare -f                   # uses function names only declare -F                   # displays function names without definitions declare -i                   # the variables are treated as integers declare -r                   # makes the variables read-only declare -x                   # marks the variables for export via the environment  ${varname:-word}             # if varname exists and isn't null, return its value; otherwise return word ${varname:word}              # if varname exists and isn't null, return its value; otherwise return word ${varname:=word}             # if varname exists and isn't null, return its value; otherwise set it word and then return its value ${varname:?message}          # if varname exists and isn't null, return its value; otherwise print varname, followed by message and abort the current command or script ${varname:+word}             # if varname exists and isn't null, return word; otherwise return null ${varname:offset:length}     # performs substring expansion. It returns the substring of $varname starting at offset and up to length characters  ${variable#pattern}          # if the pattern matches the beginning of the variable's value, delete the shortest part that matches and return the rest ${variable##pattern}         # if the pattern matches the beginning of the variable's value, delete the longest part that matches and return the rest ${variable%pattern}          # if the pattern matches the end of the variable's value, delete the shortest part that matches and return the rest ${variable%%pattern}         # if the pattern matches the end of the variable's value, delete the longest part that matches and return the rest ${variable/pattern/string}   # the longest match to pattern in variable is replaced by string. Only the first match is replaced ${variable//pattern/string}  # the longest match to pattern in variable is replaced by string. All matches are replaced  ${#varname}                  # returns the length of the value of the variable as a character string  *(patternlist)               # matches zero or more occurrences of the given patterns +(patternlist)               # matches one or more occurrences of the given patterns ?(patternlist)               # matches zero or one occurrence of the given patterns @(patternlist)               # matches exactly one of the given patterns !(patternlist)               # matches anything except one of the given patterns  $(UNIX command)              # command substitution: runs the command and returns standard output   Functions   # The function refers to passed arguments by position (as if they were positional parameters), that is, $1, $2, and so forth. # $@ is equal to \"$1\" \"$2\"... \"$N\", where N is the number of positional parameters. $# holds the number of positional parameters.   function functname() {   shell commands }  unset -f functname  # deletes a function definition declare -f          # displays all defined functions in your login session   FLOW CONTROLS   statement1 &amp;&amp; statement2  # and operator statement1 || statement2  # or operator  -a                        # and operator inside a test conditional expression -o                        # or operator inside a test conditional expression  # STRINGS  str1 == str2               # str1 matches str2 str1 != str2               # str1 does not match str2 str1 &lt; str2                # str1 is less than str2 (alphabetically) str1 &gt; str2                # str1 is greater than str2 (alphabetically) str1 \\&gt; str2               # str1 is sorted after str2 str1 \\&lt; str2               # str1 is sorted before str2 -n str1                    # str1 is not null (has length greater than 0) -z str1                    # str1 is null (has length 0)  # FILES  -a file                   # file exists or its compilation is successful -d file                   # file exists and is a directory -e file                   # file exists; same -a -f file                   # file exists and is a regular file (i.e., not a directory or other special type of file) -r file                   # you have read permission -s file                   # file exists and is not empty -w file                   # your have write permission -x file                   # you have execute permission on file, or directory search permission if it is a directory -N file                   # file was modified since it was last read -O file                   # you own file -G file                   # file's group ID matches yours (or one of yours, if you are in multiple groups) file1 -nt file2           # file1 is newer than file2 file1 -ot file2           # file1 is older than file2  # NUMBERS  -lt                       # less than -le                       # less than or equal -eq                       # equal -ge                       # greater than or equal -gt                       # greater than -ne                       # not equal  if condition then   statements [elif condition   then statements...] [else   statements] fi  for x in {1..10} do   statements done  for name [in list] do   statements that can use $name done  for (( initialisation ; ending condition ; update )) do   statements... done  case expression in   pattern1 )     statements ;;   pattern2 )     statements ;; esac  select name [in list] do   statements that can use $name done  while condition; do   statements done  until condition; do   statements done   Command-line Processing Cycle   # The default order for command lookup is functions, followed by built-ins, with scripts and executables last. # There are three built-ins that you can use to override this order: `command`, `builtin` and `enable`.  command  # removes alias and function lookup. Only built-ins and commands found in the search path are executed builtin  # looks up only built-in commands, ignoring functions and commands found in PATH enable   # enables and disables shell built-ins  eval     # takes arguments and run them through the command-line processing steps all over again   Input/Output Redirectors   cmd1|cmd2  # pipe; takes standard output of cmd1 as standard input to cmd2 &lt; file     # takes standard input from file &gt; file     # directs standard output to file &gt;&gt; file    # directs standard output to file; append to file if it already exists &gt;|file     # forces standard output to file even if noclobber is set n&gt;|file    # forces output to file from file descriptor n even if noclobber is set &lt;&gt; file    # uses file as both standard input and standard output n&lt;&gt;file    # uses file as both input and output for file descriptor n n&gt;file     # directs file descriptor n to file n&lt;file     # takes file descriptor n from file n&gt;&gt;file    # directs file description n to file; append to file if it already exists n&gt;&amp;        # duplicates standard output to file descriptor n n&lt;&amp;        # duplicates standard input from file descriptor n n&gt;&amp;m       # file descriptor n is made to be a copy of the output file descriptor n&lt;&amp;m       # file descriptor n is made to be a copy of the input file descriptor &amp;&gt;file     # directs standard output and standard error to file &lt;&amp;-        # closes the standard input &gt;&amp;-        # closes the standard output n&gt;&amp;-       # closes the ouput from file descriptor n n&lt;&amp;-       # closes the input from file descripor n  |tee &lt;file&gt;# output command to both terminal and a file (-a to append to file)   Process Handling   # To suspend a job, type CTRL+Z while it is running. You can also suspend a job with CTRL+Y. # This is slightly different from CTRL+Z in that the process is only stopped when it attempts to read input from terminal. # Of course, to interrupt a job, type CTRL+C.  myCommand &amp;  # runs job in the background and prompts back the shell  jobs         # lists all jobs (use with -l to see associated PID)  fg           # brings a background job into the foreground fg %+        # brings most recently invoked background job fg %-        # brings second most recently invoked background job fg %N        # brings job number N fg %string   # brings job whose command begins with string fg %?string  # brings job whose command contains string  kill -l               # returns a list of all signals on the system, by name and number kill PID              # terminates process with specified PID kill -s SIGKILL 4500  # sends a signal to force or terminate the process kill -15 913          # Ending PID 913 process with signal 15 (TERM) kill %1               # Where %1 is the number of job as read from 'jobs' command.  ps           # prints a line of information about the current running login shell and any processes running under it ps -a        # selects all processes with a tty except session leaders  trap cmd sig1 sig2  # executes a command when a signal is received by the script trap \"\" sig1 sig2   # ignores that signals trap - sig1 sig2    # resets the action taken when the signal is received to the default  disown &lt;PID|JID&gt;    # removes the process from the list of jobs  wait                # waits until all background jobs have finished sleep &lt;number&gt;      # wait # of seconds before continuing  pv                  # display progress bar for data handling commands. often used with pipe like |pv yes                 # give yes response everytime an input is requested from script/process   Tips &amp; Tricks   # set an alias cd; nano .bash_profile &gt; alias gentlenode='ssh admin@gentlenode.com -p 3404'  # add your alias in .bash_profile  # to quickly go to a specific directory cd; nano .bashrc &gt; shopt -s cdable_vars &gt; export websites=\"/Users/mac/Documents/websites\"  source .bashrc cd $websites   Debugging Shell Scripts   bash -n scriptname  # don't run commands; check for syntax errors only set -o noexec       # alternative (set option in script)  bash -v scriptname  # echo commands before running them set -o verbose      # alternative (set option in script)  bash -x scriptname  # echo commands after command-line processing set -o xtrace       # alternative (set option in script)  trap 'echo $varname' EXIT  # useful when you want to print out the values of variables at the point that your script exits  function errtrap {   es=$?   echo \"ERROR line $1: Command exited with status $es.\" }  trap 'errtrap $LINENO' ERR  # is run whenever a command in the surrounding script or function exits with non-zero status  function dbgtrap {   echo \"badvar is $badvar\" }  trap dbgtrap DEBUG  # causes the trap code to be executed before every statement in a function or script # ...section of code in which the problem occurs... trap - DEBUG  # turn off the DEBUG trap  function returntrap {   echo \"A return occurred\" }  trap returntrap RETURN  # is executed each time a shell function or a script executed with the . or source commands finishes executing   Colors and Background   # note: \\e or \\x1B also work instead of \\033 # Reset Color_Off='\\033[0m' # Text Reset  # Regular Colors Black='\\033[0;30m'  # Black Red='\\033[0;31m'    # Red Green='\\033[0;32m'  # Green Yellow='\\033[0;33m' # Yellow Blue='\\033[0;34m'   # Blue Purple='\\033[0;35m' # Purple Cyan='\\033[0;36m'   # Cyan White='\\033[0;97m'  # White  # Additional colors LGrey='\\033[0;37m'  # Ligth Gray DGrey='\\033[0;90m'  # Dark Gray LRed='\\033[0;91m'   # Ligth Red LGreen='\\033[0;92m' # Ligth Green LYellow='\\033[0;93m'# Ligth Yellow LBlue='\\033[0;94m'  # Ligth Blue LPurple='\\033[0;95m'# Light Purple LCyan='\\033[0;96m'  # Ligth Cyan   # Bold BBlack='\\033[1;30m' # Black BRed='\\033[1;31m'   # Red BGreen='\\033[1;32m' # Green BYellow='\\033[1;33m'# Yellow BBlue='\\033[1;34m'  # Blue BPurple='\\033[1;35m'# Purple BCyan='\\033[1;36m'  # Cyan BWhite='\\033[1;37m' # White  # Underline UBlack='\\033[4;30m' # Black URed='\\033[4;31m'   # Red UGreen='\\033[4;32m' # Green UYellow='\\033[4;33m'# Yellow UBlue='\\033[4;34m'  # Blue UPurple='\\033[4;35m'# Purple UCyan='\\033[4;36m'  # Cyan UWhite='\\033[4;37m' # White  # Background On_Black='\\033[40m' # Black On_Red='\\033[41m'   # Red On_Green='\\033[42m' # Green On_Yellow='\\033[43m'# Yellow On_Blue='\\033[44m'  # Blue On_Purple='\\033[45m'# Purple On_Cyan='\\033[46m'  # Cyan On_White='\\033[47m' # White  # Example of usage echo -e \"${Green}This is GREEN text${Color_Off} and normal text\" echo -e \"${Red}${On_White}This is Red test on White background${Color_Off}\" # option -e is mandatory, it enable interpretation of backslash escapes printf \"${Red} This is red \\n\"   Source   See Also   Learn X in Y minutes  ","categories": [],
        "tags": [],
        "url": "/references/cheatsheets/bash/",
        "teaser": "/assets/images/logos/logo_gnu-bash.svg"
      },{
        "title": "C++",
        "excerpt":"Preprocessor                               // Comment to end of line                             /* Multi-line comment */ #include  &lt;stdio.h&gt;         // Insert standard header file #include \"myfile.h\"         // Insert file in current directory #define X some text         // Replace X with some text #define F(a,b) a+b          // Replace F(1,2) with 1+2 #define X \\  some text                  // Multiline definition #undef X                    // Remove definition #if defined(X)              // Conditional compilation (#ifdef X) #else                       // Optional (#ifndef X or #if !defined(X)) #endif                      // Required after #if, #ifdef   Literals   255, 0377, 0xff             // Integers (decimal, octal, hex) 2147483647L, 0x7fffffffl    // Long (32-bit) integers 123.0, 1.23e2               // double (real) numbers 'a', '\\141', '\\x61'         // Character (literal, octal, hex) '\\n', '\\\\', '\\'', '\\\"'      // Newline, backslash, single quote, double quote \"string\\n\"                  // Array of characters ending with newline and \\0 \"hello\" \"world\"             // Concatenated strings true, false                 // bool constants 1 and 0 nullptr                     // Pointer type with the address of 0   Declarations   int x;                      // Declare x to be an integer (value undefined) int x=255;                  // Declare and initialize x to 255 short s; long l;            // Usually 16 or 32 bit integer (int may be either) char c='a';                 // Usually 8 bit character unsigned char u=255; signed char s=-1;           // char might be either unsigned long x=0xffffffffL; // short, int, long are signed float f; double d;          // Single or double precision real (never unsigned) bool b=true;                // true or false, may also use int (1 or 0) int a, b, c;                // Multiple declarations int a[10];                  // Array of 10 ints (a[0] through a[9]) int a[]={0,1,2};            // Initialized array (or a[3]={0,1,2}; ) int a[2][2]={1,2,4,5};      // Array of array of ints char s[]=\"hello\";           // String (6 elements including '\\0') std::string s = \"Hello\"     // Creates string object with value \"Hello\" std::string s = R\"(Hello World)\";                    // Creates string object with value \"Hello\\nWorld\" int* p;                     // p is a pointer to (address of) int char* s=\"hello\";            // s points to unnamed array containing \"hello\" void* p=nullptr;            // Address of untyped memory (nullptr is 0) int&amp; r=x;                   // r is a reference to (alias of) int x enum weekend {SAT,SUN};     // weekend is a type with values SAT and SUN enum weekend day;           // day is a variable of type weekend enum weekend{SAT=0,SUN=1};  // Explicit representation as int enum {SAT,SUN} day;         // Anonymous enum enum class Color {Red,Blue};// Color is a strict type with values Red and Blue Color x = Color::Red;       // Assign Color x to red typedef String char*;       // String s; means char* s; const int c=3;              // Constants must be initialized, cannot assign to const int* p=a;             // Contents of p (elements of a) are constant int* const p=a;             // p (but not contents) are constant const int* const p=a;       // Both p and its contents are constant const int&amp; cr=x;            // cr cannot be assigned to change x int8_t,uint8_t,int16_t, uint16_t,int32_t,uint32_t, int64_t,uint64_t            // Fixed length standard types auto it = m.begin();        // Declares it to the result of m.begin() auto const param = config[\"param\"];                             // Declares it to the const result auto&amp; s = singleton::instance();                             // Declares it to a reference of the result   STORAGE Classes   int x;                      // Auto (memory exists only while in scope) static int x;               // Global lifetime even if local scope extern int x;               // Information only, declared elsewhere   Statements   x=y;                        // Every expression is a statement int x;                      // Declarations are statements ;                           // Empty statement {                           // A block is a single statement     int x;                  // Scope of x is from declaration to end of block } if (x) a;                   // If x is true (not 0), evaluate a else if (y) b;              // If not x and y (optional, may be repeated) else c;                     // If not x and not y (optional)  while (x) a;                // Repeat 0 or more times while x is true  for (x; y; z) a;            // Equivalent to: x; while(y) {a; z;}  for (x : y) a;              // Range-based for loop e.g.                             // for (auto&amp; x in someList) x.y();  do a; while (x);            // Equivalent to: a; while(x) a;  switch (x) {                // x must be int     case X1: a;             // If x == X1 (must be a const), jump here     case X2: b;             // Else if x == X2, jump here     default: c;             // Else jump here (optional) } break;                      // Jump out of while, do, or for loop, or switch continue;                   // Jump to bottom of while, do, or for loop return x;                   // Return x from function to caller try { a; } catch (T t) { b; }          // If a throws a T, then jump here catch (...) { c; }          // If a throws something else, jump here   Functions   int f(int x, int y);        // f is a function taking 2 ints and returning int void f();                   // f is a procedure taking no arguments void f(int a=0);            // f() is equivalent to f(0) f();                        // Default return type is int inline f();                 // Optimize for speed f() { statements; }         // Function definition (must be global) T operator+(T x, T y);      // a+b (if type T) calls operator+(a, b) T operator-(T x);           // -a calls function operator-(a) T operator++(int);          // postfix ++ or -- (parameter ignored) extern \"C\" {void f();}      // f() was compiled in C   Function parameters and return values may be of any type. A function must either be declared or defined before it is used. It may be declared first and defined later. Every program consists of a set of a set of global variable declarations and a set of function definitions (possibly in separate files), one of which must be:   int main()  { statements... }     // or int main(int argc, char* argv[]) { statements... }   argv is an array of argc strings from the command line. By convention, main returns status 0 if successful, 1 or higher for errors.   Functions with different parameters may have the same name (overloading). Operators except :: . .* ?: may be overloaded. Precedence order is not affected. New operators may not be created.   Expressions   Operators are grouped by precedence, highest first. Unary operators and assignment evaluate right to left. All others are left to right. Precedence does not affect order of evaluation, which is undefined. There are no run time checks for arrays out of bounds, invalid pointers, etc.   T::X                        // Name X defined in class T N::X                        // Name X defined in namespace N ::X                         // Global name X  t.x                         // Member x of struct or class t p-&gt; x                       // Member x of struct or class pointed to by p a[i]                        // i'th element of array a f(x,y)                      // Call to function f with arguments x and y T(x,y)                      // Object of class T initialized with x and y x++                         // Add 1 to x, evaluates to original x (postfix) x--                         // Subtract 1 from x, evaluates to original x typeid(x)                   // Type of x typeid(T)                   // Equals typeid(x) if x is a T dynamic_cast&lt; T&gt;(x)         // Converts x to a T, checked at run time. static_cast&lt; T&gt;(x)          // Converts x to a T, not checked reinterpret_cast&lt; T&gt;(x)     // Interpret bits of x as a T const_cast&lt; T&gt;(x)           // Converts x to same type T but not const  sizeof x                    // Number of bytes used to represent object x sizeof(T)                   // Number of bytes to represent type T ++x                         // Add 1 to x, evaluates to new value (prefix) --x                         // Subtract 1 from x, evaluates to new value ~x                          // Bitwise complement of x !x                          // true if x is 0, else false (1 or 0 in C) -x                          // Unary minus +x                          // Unary plus (default) &amp;x                          // Address of x *p                          // Contents of address p (*&amp;x equals x) new T                       // Address of newly allocated T object new T(x, y)                 // Address of a T initialized with x, y new T[x]                    // Address of allocated n-element array of T delete p                    // Destroy and free object at address p delete[] p                  // Destroy and free array of objects at p (T) x                       // Convert x to T (obsolete, use .._cast&lt;T&gt;(x))  x * y                       // Multiply x / y                       // Divide (integers round toward 0) x % y                       // Modulo (result has sign of x)  x + y                       // Add, or \\&amp;x[y] x - y                       // Subtract, or number of elements from *x to *y x &lt;&lt; y                      // x shifted y bits to left (x * pow(2, y)) x &gt;&gt; y                      // x shifted y bits to right (x / pow(2, y))  x &lt; y                       // Less than x &lt;= y                      // Less than or equal to x &gt; y                       // Greater than x &gt;= y                      // Greater than or equal to  x &amp; y                       // Bitwise and (3 &amp; 6 is 2) x ^ y                       // Bitwise exclusive or (3 ^ 6 is 5) x | y                       // Bitwise or (3 | 6 is 7) x &amp;&amp; y                      // x and then y (evaluates y only if x (not 0)) x || y                      // x or else y (evaluates y only if x is false (0)) x = y                       // Assign y to x, returns new value of x x += y                      // x = x + y, also -= *= /= &lt;&lt;= &gt;&gt;= &amp;= |= ^= x ? y : z                   // y if x is true (nonzero), else z throw x                     // Throw exception, aborts if not caught x , y                       // evaluates x and y, returns y (seldom used)   Classes   class T {                   // A new type private:                    // Section accessible only to T's member functions protected:                  // Also accessible to classes derived from T public:                     // Accessible to all     int x;                  // Member data     void f();               // Member function     void g() {return;}      // Inline member function     void h() const;         // Does not modify any data members     int operator+(int y);   // t+y means t.operator+(y)     int operator-();        // -t means t.operator-()     T(): x(1) {}            // Constructor with initialization list     T(const T&amp; t): x(t.x) {}// Copy constructor     T&amp; operator=(const T&amp; t)     {x=t.x; return *this; } // Assignment operator     ~T();                   // Destructor (automatic cleanup routine)     explicit T(int a);      // Allow t=T(3) but not t=3     T(float x): T((int)x) {}// Delegate constructor to T(int)     operator int() const     {return x;}             // Allows int(t)     friend void i();        // Global function i() has private access     friend class U;         // Members of class U have private access     static int y;           // Data shared by all T objects     static void l();        // Shared code.  May access y but not x     class Z {};             // Nested class T::Z     typedef int V;          // T::V means int }; void T::f() {               // Code for member function f of class T     this-&gt;x = x;}           // this is address of self (means x=x;) int T::y = 2;               // Initialization of static member (required) T::l();                     // Call to static member T t;                        // Create object t implicit call constructor t.f();                      // Call method f on object t  struct T {                  // Equivalent to: class T { public:   virtual void i();         // May be overridden at run time by derived class   virtual void g()=0; };    // Must be overridden (pure virtual) class U: public T {         // Derived class U inherits all members of base T   public:   void g(int) override; };  // Override method g class V: private T {};      // Inherited members of T become private class W: public T, public U {};                             // Multiple inheritance class X: public virtual T {};                             // Classes derived from X have base T directly   All classes have a default copy constructor, assignment operator, and destructor, which perform the corresponding operations on each data member and each base class as shown above. There is also a default no-argument constructor (required to create arrays) if the class has no constructors. Constructors, assignment, and destructors do not inherit.   Templates   template &lt;class T&gt; T f(T t);// Overload f for all types template &lt;class T&gt; class X {// Class with type parameter T   X(T t); };                // A constructor template &lt;class T&gt; X&lt;T&gt;::X(T t) {}                             // Definition of constructor X&lt;int&gt; x(3);                // An object of type \"X of int\" template &lt;class T, class U=T, int n=0&gt;                             // Template with default parameters   Namespaces   namespace N {class T {};}   // Hide name T N::T t;                     // Use name T in namespace N using namespace N;          // Make T visible without N::   memory (dynamic memory management)   #include &lt;memory&gt;           // Include memory (std namespace) shared_ptr&lt;int&gt; x;          // Empty shared_ptr to a integer on heap. Uses reference counting for cleaning up objects. x = make_shared&lt;int&gt;(12);   // Allocate value 12 on heap shared_ptr&lt;int&gt; y = x;      // Copy shared_ptr, implicit changes reference count to 2. cout &lt;&lt; *y;                 // Dereference y to print '12' if (y.get() == x.get()) {   // Raw pointers (here x == y)     cout &lt;&lt; \"Same\";   }   y.reset();                  // Eliminate one owner of object if (y.get() != x.get()) {      cout &lt;&lt; \"Different\";   }   if (y == nullptr) {         // Can compare against nullptr (here returns true)     cout &lt;&lt; \"Empty\";   }   y = make_shared&lt;int&gt;(15);   // Assign new value cout &lt;&lt; *y;                 // Dereference x to print '15' cout &lt;&lt; *x;                 // Dereference x to print '12' weak_ptr&lt;int&gt; w;            // Create empty weak pointer w = y;                      // w has weak reference to y. if (shared_ptr&lt;int&gt; s = w.lock()) { // Has to be copied into a shared_ptr before usage     cout &lt;&lt; *s; } unique_ptr&lt;int&gt; z;          // Create empty unique pointers unique_ptr&lt;int&gt; q; z = make_unique&lt;int&gt;(16);   // Allocate int (16) on heap. Only one reference allowed. q = move(z);                // Move reference from z to q. if (z == nullptr){     cout &lt;&lt; \"Z null\"; } cout &lt;&lt; *q; shared_ptr&lt;B&gt; r; r = dynamic_pointer_cast&lt;B&gt;(t); // Converts t to a shared_ptr&lt;B&gt;    math.h, cmath (floating point math)   #include &lt;cmath&gt;            // Include cmath (std namespace) sin(x); cos(x); tan(x);     // Trig functions, x (double) is in radians asin(x); acos(x); atan(x);  // Inverses atan2(y, x);                // atan(y/x) sinh(x); cosh(x); tanh(x);  // Hyperbolic sin, cos, tan functions exp(x); log(x); log10(x);   // e to the x, log base e, log base 10 pow(x, y); sqrt(x);         // x to the y, square root ceil(x); floor(x);          // Round up or down (as a double) fabs(x); fmod(x, y);        // Absolute value, x mod y   assert.h, cassert (Debugging Aid)   #include &lt;cassert&gt;        // Include iostream (std namespace) assert(e);                // If e is false, print message and abort #define NDEBUG            // (before #include &lt;assert.h&gt;), turn off assert   iostream.h, iostream (Replaces stdio.h)   #include &lt;iostream&gt;         // Include iostream (std namespace) cin &gt;&gt; x &gt;&gt; y;              // Read words x and y (any type) from stdin cout &lt;&lt; \"x=\" &lt;&lt; 3 &lt;&lt; endl;  // Write line to stdout cerr &lt;&lt; x &lt;&lt; y &lt;&lt; flush;    // Write to stderr and flush c = cin.get();              // c = getchar(); cin.get(c);                 // Read char cin.getline(s, n, '\\n');    // Read line into char s[n] to '\\n' (default) if (cin)                    // Good state (not EOF)?                             // To read/write any type T: istream&amp; operator&gt;&gt;(istream&amp; i, T&amp; x) {i &gt;&gt; ...; x=...; return i;} ostream&amp; operator&lt;&lt;(ostream&amp; o, const T&amp; x) {return o &lt;&lt; ...;}   fstream.h, fstream (File I/O works like cin, cout as above)   #include &lt;fstream&gt;          // Include filestream (std namespace) ifstream f1(\"filename\");    // Open text file for reading if (f1)                     // Test if open and input available     f1 &gt;&gt; x;                // Read object from file f1.get(s);                  // Read char or line f1.getline(s, n);           // Read line into string s[n] ofstream f2(\"filename\");    // Open file for writing if (f2) f2 &lt;&lt; x;            // Write to file   string (Variable sized character array)   #include &lt;string&gt;         // Include string (std namespace) string s1, s2=\"hello\";    // Create strings s1.size(), s2.size();     // Number of characters: 0, 5 s1 += s2 + ' ' + \"world\"; // Concatenation s1 == \"hello world\"       // Comparison, also &lt;, &gt;, !=, etc. s1[0];                    // 'h' s1.substr(m, n);          // Substring of size n starting at s1[m] s1.c_str();               // Convert to const char* s1 = to_string(12.05);    // Converts number to string getline(cin, s);          // Read line ending in '\\n'   vector (Variable sized array/stack with built in memory allocation)   #include &lt;vector&gt;         // Include vector (std namespace) vector&lt;int&gt; a(10);        // a[0]..a[9] are int (default size is 0) vector&lt;int&gt; b{1,2,3};        // Create vector with values 1,2,3 a.size();                 // Number of elements (10) a.push_back(3);           // Increase size to 11, a[10]=3 a.back()=4;               // a[10]=4; a.pop_back();             // Decrease size by 1 a.front();                // a[0]; a[20]=1;                  // Crash: not bounds checked a.at(20)=1;               // Like a[20] but throws out_of_range() for (int&amp; p : a)   p=0;                    // C++11: Set all elements of a to 0 for (vector&lt;int&gt;::iterator p=a.begin(); p!=a.end(); ++p)   *p=0;                   // C++03: Set all elements of a to 0 vector&lt;int&gt; b(a.begin(), a.end());  // b is copy of a vector&lt;T&gt; c(n, x);        // c[0]..c[n-1] init to x T d[10]; vector&lt;T&gt; e(d, d+10);      // e is initialized from d   deque (Array stack queue)   deque&lt;T&gt; is like vector&lt;T&gt;, but also supports:   #include &lt;deque&gt;          // Include deque (std namespace) a.push_front(x);          // Puts x at a[0], shifts elements toward back a.pop_front();            // Removes a[0], shifts toward front   utility (pair)   #include &lt;utility&gt;        // Include utility (std namespace) pair&lt;string, int&gt; a(\"hello\", 3);  // A 2-element struct a.first;                  // \"hello\" a.second;                 // 3   map (associative array - usually implemented as binary search trees - avg. time complexity: O(log n))   #include &lt;map&gt;            // Include map (std namespace) map&lt;string, int&gt; a;       // Map from string to int a[\"hello\"] = 3;           // Add or replace element a[\"hello\"] for (auto&amp; p:a)     cout &lt;&lt; p.first &lt;&lt; p.second;  // Prints hello, 3 a.size();                 // 1   unordered_map (associative array - usually implemented as hash table - avg. time complexity: O(1))   #include &lt;unordered_map&gt;  // Include map (std namespace) unordered_map&lt;string, int&gt; a; // Map from string to int a[\"hello\"] = 3;           // Add or replace element a[\"hello\"] for (auto&amp; p:a)     cout &lt;&lt; p.first &lt;&lt; p.second;  // Prints hello, 3 a.size();                 // 1   set (store unique elements - usually implemented as binary search trees - avg. time complexity: O(log n))   #include &lt;set&gt;            // Include set (std namespace) set&lt;int&gt; s;               // Set of integers s.insert(123);            // Add element to set if (s.find(123) != s.end()) // Search for an element     s.erase(123); cout &lt;&lt; s.size();         // Number of elements in set   unordered_set (store unique elements - usually implemented as a hash set - avg. time complexity: O(1))   #include &lt;unordered_set&gt;  // Include set (std namespace) unordered_set&lt;int&gt; s;     // Set of integers s.insert(123);            // Add element to set if (s.find(123) != s.end()) // Search for an element     s.erase(123); cout &lt;&lt; s.size();         // Number of elements in set   algorithm (A collection of 60 algorithms on sequences with iterators)   #include &lt;algorithm&gt;      // Include algorithm (std namespace) min(x, y); max(x, y);     // Smaller/larger of x, y (any type defining &lt;) swap(x, y);               // Exchange values of variables x and y sort(a, a+n);             // Sort array a[0]..a[n-1] by &lt; sort(a.begin(), a.end()); // Sort vector or deque reverse(a.begin(), a.end()); // Reverse vector or deque   chrono (Time related library)  #include &lt;chrono&gt;         // Include chrono using namespace std::chrono; // Use namespace auto from =               // Get current time_point   high_resolution_clock::now(); // ... do some work        auto to =                 // Get current time_point   high_resolution_clock::now(); using ms =                // Define ms as floating point duration   duration&lt;float, milliseconds::period&gt;;                           // Compute duration in milliseconds cout &lt;&lt; duration_cast&lt;ms&gt;(to - from)   .count() &lt;&lt; \"ms\";   thread (Multi-threading library)  #include &lt;thread&gt;         // Include thread unsigned c =    hardware_concurrency(); // Hardware threads (or 0 for unknown) auto lambdaFn = [](){     // Lambda function used for thread body     cout &lt;&lt; \"Hello multithreading\"; }; thread t(lambdaFn);       // Create and run thread with lambda t.join();                 // Wait for t finishes  // --- shared resource example --- mutex mut;                         // Mutex for synchronization condition_variable cond;           // Shared condition variable const char* sharedMes              // Shared resource   = nullptr; auto pingPongFn =                  // thread body (lambda). Print someone else's message   [&amp;](const char* mes){     while (true){       unique_lock&lt;mutex&gt; lock(mut);// locks the mutex        do {                         cond.wait(lock, [&amp;](){     // wait for condition to be true (unlocks while waiting which allows other threads to modify)                   return sharedMes != mes; // statement for when to continue         });       } while (sharedMes == mes);  // prevents spurious wakeup       cout &lt;&lt; sharedMes &lt;&lt; endl;       sharedMes = mes;              lock.unlock();               // no need to have lock on notify        cond.notify_all();           // notify all condition has changed     }   }; sharedMes = \"ping\"; thread t1(pingPongFn, sharedMes);  // start example with 3 concurrent threads thread t2(pingPongFn, \"pong\"); thread t3(pingPongFn, \"boing\");   future (thread support library)  #include &lt;future&gt;         // Include future function&lt;int(int)&gt; fib =  // Create lambda function   [&amp;](int i){     if (i &lt;= 1){       return 1;     }     return fib(i-1)           + fib(i-2);   }; future&lt;int&gt; fut =         // result of async function   async(launch::async, fib, 4); // start async function in other thread // do some other work  cout &lt;&lt; fut.get();        // get result of async function. Wait if needed.   Source   See Also   Learn X in Y minutes Cheat Sheet Data Structures and Algorithms  ","categories": [],
        "tags": [],
        "url": "/references/cheatsheets/cpp/",
        "teaser": "/assets/images/logos/logo_cpp.svg"
      },{
        "title": "Fortran95",
        "excerpt":"Hello World  program hello     write(*,*) 'Hello World!' end      Please keep in mind that the language is not case sensitive outside of character literals.    Terminology     Statement - An instruction which is either executabe or nonexecutable.   Construct - A sequence of statements ending with a construct terminal statement.   Function - A procedure that returns the value of a single variable.   Procedure - Either a function or subroutine. Intrinsic procedure, external procedure, module procedure, internal procedure, dummy procedure or statement function.   Subroutine - A procedure that is invoked by a CALL statement or defined assignment statement. It can return more than one argument.   Special Characters     ’ (Apostrophe) Editing, declaring a string   “ (Quotation Marks) Declaring a string   * (Backslash and asterisk) Comment lines.   : (Colon) Editing.   :: (Double Colon) Separator.   ! (Exclamation) inline comment.   ; (Semicolon) Separates Statement on single source line. Except when it is in a character context.   &amp; (Ampersand) Line continuation character.   Data types     integer   real   double precision   character   logical   complex   Type Declaration Statements     dimension - Specifies the dimensions (start and end index) of an array.   common - Common storage area for variables that are in several program units.   data - Puts initial values into variables.   non_overridable - Declares a bound procedure cannot be overridden in a subclass of this class.   parameter - Makes a variable into a constant with a certain value.   allocatable - Declares an array is allocatable.   dimension - Declares the rank and and shape of an array.   external - Declares that a name is a function external to a pro-gram unit.   intent - Specifies the intended use of a dummy argument.   intrinsic - Declares that a name is a specific intrinsic function   nopass - Declares a bound procedure cannot be overridden in a subclass of this class.   optional - Declares that a dummey argument is optional.   parameter - Defines named constant.   pointer - Declares that a variable is a pointer.   private - Declares that an object is private to a module.   protected - Declares that an object in a module is protected, meaning that it can be used but not modified outside the module in which it is defined.   public - Declares that an object is private to a module.   save - Declares that an object is private to a module.   target - Declares that an object is private to a module.   volatile - Declares that a value of a variable might be changed at any time by some source external to the program.   User Defined Types  Definition of a new data type called ‘personType’:   type :: personType         character(len=100) :: name         integer :: age         real :: weight end type personType   Declare an instance of person type:   type (personType) :: p   Access properties:   p%name = 'John Doe' p%age = 45 p%weight = 70   Operators          Arithmetic Operators: | Priority | Operation | Symbol | FORTRAN Expression |  | :—: | :—: | :—: | :—: | | inside to outside | Parentheses | ( ) | A(A+B) |  | right to left | Exponentiation | ** | A**B | | left to right | Multiplication | * | AB | | left to right | Division | / | A/B | | left to right | Addition | + | A+B | | left to right | Subtraction | - | A-B | | left to right | Unary Minus | - | -A |       Character Operators:            Concatenation\t- you can do it by using the ‘//’ operator.           write(*,*) 'Concate'//'nation'                       Substring - string(startingIndex:endIndex)           character(len=20) :: c = 'substring'   write(*,*) c(1:3)                           Logical Operators (in order of precedence):            .not.       .and.       .or.                Relational Operators                                  Operator           Alternative           Meaning                                           .eq.           ==           equal to                             .ne.           /=           not equal to                             .lt.           &lt;           less than                             .le.           &lt;=           less than or equal                             .gt.           &gt;           greater than                             .ge.           &gt;=           greater than or equal                             .eqv.                       equivalent to (for boolean)                             .neqv.                       not equivalent to (for boolean)                           Arrays   Arrays can be up to seven dimensions. They are stored in column major format. This is not the same as C which is stored in row major format. (Row-major order). By default the first index in an array is 1.   Define an array with starting index -3 and end index 3 using the dimension statement:  integer, dimension(-3:3) :: arr data arr/1,2,3,4,5,5,5/   You can use the following syntax for repeated values count*repeatedValue:  data arr/1,2,3,4,3*5/   Access element:  write(*,*) arr(-2) ! Output: 2   Array subset:  write(*,*) arr(-2:2) ! Output: 2 3 4 5 5   Define a multidimensional array:  integer, dimension(1:3, 1:3) :: arr2 data arr2/1,2,3,4,5,6,7,8,9/  write(*,*) arr2(1,1:3) ! Output: 1 4 7    write(*,*) arr2(1:3,1) ! Output: 1 2 3 write(*,*) arr2(1:3,1:3) ! Output:  1 2 3 4 5 6 7 8 9   Array Operations   If we want to add two arrays a and b and put the result in c. We may have something like the following piece of code:   do i=1,n   do j=1,n     c(j,i) = a(j,i) + b(j,i)   enddo enddo  However in Fortran we can also do the following:  c = a + b   Most of the intrinsic functions operate component-wise on arrays. m = sin(k) is equivalent to:  do i=1,n   m(i) = sin(k(i)) enddo     Note: c = a*b multplies corresponding elements in A and B. It does NOT do matrix multiplication. There are some intrinic functions for matrix multiplication (matmul) and dot products (dot_product).    Another example operations on a vector and a scalar:  real, dimension(3) :: m data m/1.0, 2.0, 3.0/  write(*,*) m + 1   ! Output: 2.0 3.0 4.0     write(*,*) m * 2   ! Output: 2.0 4.0 6.0     write(*,*) m/2     ! Output: 0.5 1.0 1.5    write(*,*) sqrt(m) ! Output: 1.00 1.41 1.73   Implicit variable declaration   Back in the 1950s, when Fortran was first developed, memory was very expensive, and because of this, a typical computer might have only a few KB of main memory. So, programmers wanted their Fortran programs to be as short as possible. Because of this they made variable declaration implicit. A consequence of this is type inference, this refers to the compiler’s ability to deduce the type of the used variable if it has not been declared beforehand.   This means that when you mistype a character of a variable name the compiler will declare a new variable instead of an error!   For example:  real :: variable = 0 vaIRable = 3 + 5 ! wrong name write(*,*) variable ! output is 0   You can force explicit variable declaration by either using the “implicit none” statement or by passing a specific parameter to the compiler.   If you put the “implicit none” statement at the top of this piece of code:  implicit none real :: variable = 0 vaIRable = 3 + 5 !!  write(*,*) variable   You will get a compile time error similar to this:      vaIRable = 3 + 5 ! wrong name             1 Error: Symbol 'vairable' at (1) has no IMPLICIT type      According to the Fortran language standard unless specified otherwise, all variables starting with letters I, J, K, L, M and N are of type integer. All other are by default of type real. Other data types must be explicitly declared. Those defaults can be overridden by ‘implicit TypeName (CharacterRange)’ statements. However it is considered a good practice to always use the ‘implicit none’ statement and explicitly declare all variables!    Goto Statements   Goto statements performs a one-way transfer of control to another line of code. A function call normally returns control. Goto statements should be avoided as they can lead to spaghetti code.   Simple example:  n = 2 if(n.eq.2) then \tgoto 100 endif  write(*,*) 'This line will not be printed!'  100 write(*,*) 'Hi!'   Goto statements can have multiple parameters.  goto (s[, s])e  Where ‘s’ is label of an executable statement and ‘e’ is an expression of type integer which points which label should be used by index.   Example:  n = 3 goto (10, 20, 30, 40), n   10 write(*,*) 10 20 write(*,*) 20 30 write(*,*) 30 40 write(*,*) 40   Output:  30 40   Loops   A loop can be defined using the following syntax:  do  variable = startValue, StopValue [, StepValue]        \tone or more statments end do  StepValue is optional. Default value is 1.   Example, where an iteration is skipped:  do i = 1, 10, 2 \tif (i.eq.5) then     \tcycle ! Skip iteration     endif  \twrite(*,*) \"i = \", i end do   Output:   i = 1  i = 3  i = 7  i = 9   Example of a do while loop:  integer:: i = 1, n = 3          do while (i &lt;= n)   write(*,*) \"i = \", i                   i = i + 1 enddo   Output:   i = 1  i = 2  i = 3   Implied DO loops are DO loops in the sense that they control the execution of some iterative procedure, but are different than DO loops because they do not use the do statement to control the execution. Basically, these loops are a shorthand that was introduced in FORTRAN to provide a method for array initialization and to cut back on the number of lines of code that where required in the program. Example:  write (*,*) (i, i=1, 5) ! Output:  1 2 3 4 5   Control flow  If/else statement:  if(n.eq.2) then \twrite(*,*) 'N is equal to 2' else \twrite(*,*) 'N is not equal to 2' endif   Switch case statement:  character(len=1) :: c c = 'C'  select case (c)    case ('A')       write(*,*) 'A'    case ('B')       write(*,*) 'B'    case ('C')       write(*,*) 'C'    case ('D')       write(*,*) 'D'    case default       write(*,*) 'Other' end select   Functions   Defining and calling a function:  program functions   implicit none    real :: k = 4.5, z = 1.5    write (*,*) sumNumbers(k,z)      contains       function sumNumbers(a, b)           real :: sumNumbers  ! The variable with the same name as the function is the returned value           real, intent(in) :: a,b ! a and b cannot be modified                      sumNumbers = a + b                       end function sumNumbers        end program functions   Subroutines  Subroutines in Fortran do not return a value. Instead they can modify some of their arguments. They must be invoked with the ‘call’ keyword. The ‘intent’ statement defines the type of the argument. Input arguments cannot be changed inside the subroutine.  real :: k call sumNumbers(k, 1.0, 3.0) write (*,*) k ! Output is 4.0  contains     subroutine sumNumbers(k, z, y)         real, intent(out) :: k ! Output variable         real, intent(in) :: z,y ! Input variable                  k = z + y     end subroutine sumNumbers   Modules   Define a module:  module vector     implicit none     private ! private statement causes all data and subprograms to be hidden          type, public :: vectorType         integer :: n = 3         real :: a(3) ! vector component, array         real :: magnitude     end type vectorType          interface assignment(=)         module procedure assignVector     end interface          public :: magnitude          contains         subroutine assignVector (left, right)             type(vectorType), intent(in) :: right             type(vectorType), intent(inout) :: left                          integer :: i                          left%n = right%n             left%magnitude = right%magnitude                          do i = 1, right%n                 left%a(i) = right%a(i)              enddo                      end subroutine assignVector              subroutine magnitude (x)             type(vectorType), intent(inout) :: x             integer :: i                          x%magnitude = 0.0             do i= 1, x%n ! increment is omitted                 x%magnitude = x%magnitude + x%a(i) * x%a(i)             enddo                           x%magnitude = sqrt(x%magnitude)                      end subroutine magnitude       end module vector   Use the module:  program modules     use vector     implicit none                type(vectorType) :: v1,v2              write(*,*) 'Program using modules'     v1%a(1) = 1.0     v1%a(2) = 1.0     v1%a(3) = 0.0         write (*,*) 'Vector magnitude', v1%magnitude      v2 = v1     write(*,*) 'Second vector', v2%a end program modules   File I/O   Write Pi to a file and open the file to check if the content is written as expected:  program fileIO implicit none      integer :: istat     real :: a,b     a = 3.142      ! open a file     open(101, file = \"out.txt\", status = \"unknown\", action=\"write\", form=\"formatted\", IOSTAT=istat)      ! check the file     if( istat /= 0) then         write (*,*) 'Error opening file'         return     endif      write(101, '(f0.3)') a      close(101)      ! open for reading     open(102, file = \"out.txt\", status = \"old\", action=\"read\", form=\"formatted\", IOSTAT=istat)      ! check the file     if( istat /= 0) then         write (*,*) 'Error opening file'         return     endif      read(102, '(f5.3)') b     write(*, '(f5.3)') b      close(102)      write(*,*) 'A is equal to B: ', a.eq.b  end program fileIO   Command line arguments  A simple program to read the passed arguments and print them:  program argumentsTest        integer :: num_args, ix      character(len=12), dimension(:), allocatable :: args       num_args = command_argument_count()      allocate(args(num_args))             if(.not.allocated(args)) then         return      endif       do ix = 1, num_args          call get_command_argument(ix,args(ix))          ! now parse the argument as you wish      end do          print*, args end program argumentsTest   Source   See Also   Learn X in Y minutes  ","categories": [],
        "tags": [],
        "url": "/references/cheatsheets/fortran95/",
        "teaser": "/assets/images/logos/logo_fortran.svg"
      },{
        "title": "Git",
        "excerpt":"Important Folders      .gitignore is a file including names of stuff that you don”t want to be staged or tracked. You usually keep your local files like database, media, and etc here. You can find good resources online about ignoring specific files in your project files. The .gitignore itself is also get ignored   .git is a hidden directory in repo directory including git files. It is created after “git init”.   Configuration   git config --global --list                   # lists the git configuration for all repos git config --global --edit                   # opens an editor to edit the git config file git config --global alias.&lt;handle&gt; &lt;command&gt; # add git aliases to speed up workflow , eg. if  handle is st and command is status then running git st would execute   Initialization   git init            # initiates git in the current directory git remote add origin https://github.com/repo_name.git        # add remote reposiory git clone &lt;address&gt; # creates a git repo from given address (get the address from your git-server) git clone &lt;address&gt; -b &lt;branch_name&gt; &lt;path/to/directory&gt;  # clones a git repo from the address into the given directory and checkout's the given branch git clone &lt;address&gt; -b &lt;branch_name&gt; --single-branch  # Clones a single branch   Staging and Unstaging   git status         # shows the status of modified and staged files  git add file.txt   # adds(stages) file.txt to the git git add *          # adds(stages) all new modifications, deletions, creations to the git git reset file.txt # Removes file.txt from the stage git reset --hard   # Throws away all your uncommitted changes, hard reset files to HEAD git rm file.txt    # removes file.txt both from git and file system git rm --cached file.txt # only removes file.txt both from git index git status         # shows the modifications and stuff that are not staged yet   Branch Handling   git branch                         # shows all the branches (current branch is shown with a star) git branch my-branch               # creates my-branch git branch -d my-branch            # deletes my-branch git checkout my-branch         \t   # switches to my-branch git merge my-branch                # merges my-branch to current branch git push origin --delete my-branch # delete remote branch git branch -m &lt;new-branch-name&gt;    # rename the branch git checkout --orphan &lt;branch_name&gt; # checkout a branch with no commit history git branch -vv                     # list all branches and their upstreams, as well as last commit on branch git branch -a                      # List all local and remote branches   Stash   git stash                            # stashes the staged and unstaged changes (git status will be clean after it) git stash -u                         # stash everything including new untracked files (but not .gitignore) git stash save \"msg\"                 # stash with a msg git stash list                       # list all stashes git stash pop                        # delete the recent stash and applies it git stash pop stash@{2}              # delete the {2} stash and applies it git stash show                       # shows the description of stash git stash apply                      # keep the stash and applies it to the git git stash branch my-branch stash@{1} # creates a branch from your stash git stash drop stash@{1}             # deletes the {1} stash git stash clear                      # clears all the stash   Commiting and Pushing   git commit -m \"msg\"          # commit changes with a msg git commit --amend           # combine staged changes with the previous commit, or edit the previous commit message without changing its snapshot git commit --amend --no-edit # amends a commit without changing its commit message git commit --amend --author='Author Name &lt;email@address.com&gt;'    # Amend the author of a commit git push my-remote my-branch # pushes the commits to the my-remote in my-branch (does not push the tags) git revert &lt;commit-id&gt;       # Undo a commit by creating a new commit  git cherry-pick &lt;commit_id&gt;                     # merge the specified commit git cherry-pick &lt;commit_id_A&gt;^..&lt;commit_id_B&gt;   # pick the entire range of commits where A is older than B ( the ^ is for including A as well )   Pull and Rebase   git pull my-remote my-branch      # pulls and tries to merge my-branch from my-remote to the current branch  git rebase -i &lt;commit_id&gt;         # Rebase commits from a commit ID git rebase --abort                # Abort a running rebase git rebase --continue             # Continue rebasing after fixing all conflicts   Remote   git remote                         # shows the remotes git remote -v                      # shows the remote for pull and push git remote add my-remote &lt;address&gt; # creates a remote (get the address from your git-server) git remote rm my-remote            # Remove a remote   Logs   git log                      # shows the log of commits git log --oneline            # shows the log of commits, each commit in a single line git log -p &lt;file_name&gt;       # change over time for a specific file git log &lt;Branch1&gt; ^&lt;Branch2&gt; # lists commit(s) in branch1 that are not in branch2 git log -n &lt;x&gt;               # lists the last x commits git log -n &lt;x&gt; --oneline     # lists the last x commits, each commit in single line git grep --heading --line-number '&lt;string/regex&gt;' # Find lines matching the pattern in tracked files git log --grep='&lt;string/regex&gt;'                   # Search Commit log   Show   git show                     # shows one or more objects (blobs, trees, tags and commits). git diff                     # show changes between commits, commit and working tree git diff --color             # show colored diff git diff --staged            # Shows changes staged for commit   Tags   git tag                           # shows all the tags git tag -a v1.0 -m \"msg\"          # creates an annotated tag git show v1.0                     # shows the description of version-1.0 tag git tag --delete v1.0             # deletes the tag in local directory git push --delete my-remote v1.0  # deletes the tag in my-remote (be carefore to not delete a branch) git push my-remote my-branch v1.0 # push v1.0 tag to my-remote in my-branch git fetch --tags                  # pulls the tags from remote   Cleaning   git clean -f                      # clean untracked files permanently git clean -f -d/git clean -fd     # To remove directories permanently git clean -f -X/git clean -fX     # To remove ignored files permanently git clean -f -x/git clean -fx     # To remove ignored and non-ignored files permanently   Source   See Also   Learn X in Y minutes  ","categories": [],
        "tags": [],
        "url": "/references/cheatsheets/git/",
        "teaser": "/assets/images/logos/logo_git.svg"
      },{
        "title": "HTML5",
        "excerpt":"Document Summary   &lt;!DOCTYPE html&gt;                 &lt;!-- Tells the browser that HTML5 version of HTML to be recognized by the browser --&gt; &lt;html lang=\"en\"&gt;&lt;/html&gt;         &lt;!-- The HTML lang attribute is used to identify the language of text content on the web. This information helps search engines return language specific results, --&gt; &lt;head&gt;&lt;/head&gt;                   &lt;!-- Contains Information specific to the page like title, styles and scripts --&gt; &lt;title&gt;&lt;/title&gt;                 &lt;!-- Title for the page that shows up in the browser title bar --&gt; &lt;body&gt;&lt;/body&gt;                   &lt;!-- Content that the user will see --&gt;   Document Information   &lt;base/&gt;                         &lt;!-- Usefull for specifying relative links in a document --&gt; &lt;style&gt;&lt;/style&gt;                 &lt;!-- Contains styles for the html document --&gt; &lt;meta/&gt;                         &lt;!-- Contains additional information about the page, author, page description and other hidden page info --&gt; &lt;script&gt;&lt;/script&gt;               &lt;!-- Contains all scripts internal or external --&gt; &lt;link/&gt;                         &lt;!-- Used to create relationships with external pages and stylesheets --&gt;   Document Structure   &lt;h1&gt;&lt;/h1&gt; ... &lt;h6&gt;&lt;/h6&gt;         &lt;!-- All six levels of heading with 1 being the most promiment and 6 being the least prominent --&gt; &lt;p&gt;&lt;/p&gt;                         &lt;!-- Used to organize paragraph text --&gt; &lt;div&gt;&lt;/div&gt;                     &lt;!-- A generic container used to denote a page section --&gt; &lt;span&gt;&lt;/span&gt;                   &lt;!-- Inline section or block container used for creating inline style elements --&gt; &lt;br/&gt;                           &lt;!-- Creates a line-break --&gt; &lt;hr&gt;                            &lt;!-- Creates a sectional break into HTML --&gt;   Text Formatting   &lt;strong&gt;&lt;/strong&gt; and &lt;b&gt;&lt;/b&gt;   &lt;!-- Makes text contained in the tag as bold --&gt; &lt;em&gt;&lt;/em&gt; and &lt;i&gt;&lt;/i&gt;           &lt;!-- Alternative way to make the text contained in the tag as italic --&gt; &lt;strike&gt;&lt;/strike&gt;               &lt;!-- Creates a strike through the text element --&gt; &lt;pre&gt;&lt;/pre&gt;                     &lt;!-- Preformatted monospace text block with some spacing intact --&gt; &lt;blockquote&gt;&lt;/blockquote&gt;       &lt;!-- Contains long paragraphs of quotations often cited --&gt; &lt;abbr&gt;&lt;/abbr&gt;                   &lt;!-- Contains abbreviations while also making the full form avaialable --&gt; &lt;address&gt;&lt;/address&gt;             &lt;!-- Used to display contact information --&gt; &lt;code&gt;&lt;/code&gt;                   &lt;!-- Used to display inline code snippets --&gt; &lt;q&gt;&lt;/q&gt;                         &lt;!-- Defines a short inline quotation --&gt; &lt;sub&gt;&lt;/sub&gt;                     &lt;!-- \tDefines subscripted text --&gt; &lt;sup&gt;&lt;/sup&gt;                     &lt;!-- Defines superscripted text --&gt; &lt;kbd&gt;&lt;/kbd&gt;                     &lt;!-- Specifies text as keyboard input --&gt; &lt;small&gt;&lt;/small&gt;                 &lt;!-- Specifies small text --&gt;     Links Formatting   &lt;a href=\"url\"&gt;&lt;/a&gt;              &lt;!-- Used to link to external or internal pages of a wbesite --&gt; &lt;a href=\"mailto:email@example.com\"&gt;&lt;/a&gt;           &lt;!-- Used to link to an email address --&gt; &lt;a href=\"name\"&gt;&lt;/a&gt;             &lt;!-- Used to link to a document element --&gt; &lt;a href=\"#name\"&gt;&lt;/a&gt;            &lt;!-- Used to link to specific div element --&gt; &lt;a href=\"tel://####-####-##\"&gt;&lt;/a&gt;                 &lt;!-- Used to display phone numbers and make them clickable --&gt;   Image Formatting   &lt;img src=\"url\" alt=\"text\"&gt;      &lt;!-- Used to display images in a webpage where src=\"url\" contains the link to the image source and alt=\"\" contains an alternative text to display when the image is not displayed --&gt;   List Formatting   &lt;ol&gt;&lt;/ol&gt;                       &lt;!-- Used to create ordered lists with numbers in the items --&gt; &lt;ul&gt;&lt;/ul&gt;                       &lt;!-- Used to display unordered lists with numbers in the items --&gt; &lt;li&gt;&lt;/li&gt;                       &lt;!-- Contains list items inside ordered and unordered lists --&gt; &lt;dl&gt;&lt;/dl&gt;                       &lt;!-- Contains list item definitions --&gt; &lt;dt&gt;&lt;/dt&gt;                       &lt;!-- Definition of single term inline with body content --&gt; &lt;dd&gt;&lt;/dd&gt;                       &lt;!-- The descrpition of the defined term --&gt;   Forms Formatting and Attributes   &lt;form action=\"url\"&gt;&lt;/form&gt;      &lt;!-- Form element creates a form and action=\"\" specifies where the data is to be sent to when the visitor submits the form --&gt;  &lt;!-- Supported attributes --&gt; method=\"somefunction()\"         &lt;!-- Contains the type of request (GET, POST... etc) which dictates how to send the data of the form --&gt; enctype=\"\"                      &lt;!-- Dictates how the data is to be encoded when the data is sent to the web server. --&gt; autocomplete=\"\"                 &lt;!-- Specifies if the autocomplete functionality is enabled or not --&gt; novalidate                      &lt;!-- Dictates if the form will be validated or not --&gt; accept-charset=\"\"               &lt;!-- Identifies the character encoding upon form submission --&gt; target=\"\"                       &lt;!-- Tell where to display the information upon form submission. Possible values: '_blank', '_self', '_parent', '_top' --&gt;                              &lt;fieldset disabled=\"disabled\"&gt;&lt;/fieldset&gt;         &lt;!-- Identifies the group of all fields in the form --&gt;  &lt;label for=\"\"&gt;&lt;/label&gt;          &lt;!-- A simple field label telling the user what to type in the field --&gt;  &lt;legend&gt;&lt;/legend&gt;               &lt;!-- The form legend acts as a caption for the fieldset element --&gt;  &lt;input type=\"text/email/number/color/date\"&gt;       &lt;!-- Input is the input field where the user can input various types of data --&gt; &lt;!-- Supported attributes --&gt; name=\"\"                         &lt;!-- Describes the name of the form --&gt; width=\"\"                        &lt;!-- Specifies the width of an input field --&gt; value=\"\"                        &lt;!-- Describes the value of the input information field --&gt; size=\"\"                         &lt;!-- Specifies the input element width in characters --&gt; maxlength=\"\"                    &lt;!-- Specifies the maximum input character numbers --&gt; required=\"\"                     &lt;!-- Specifies if the input field is required to fill in before submitting the form --&gt; step=\"\"                         &lt;!-- Identifies the legal number intervals of the input field --&gt;  &lt;textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\"&gt;      &lt;!-- Specifies a large input text field for longer messages --&gt; &lt;/textarea&gt;  &lt;select name=\"\"&gt;&lt;/select&gt;       &lt;!-- Describes a dropdown box for users to select from variety of choices --&gt; &lt;!-- Supported attributes --&gt; name=\"\"                         &lt;!-- The name for a dropdown combination box --&gt; size=\"\"                         &lt;!-- Specifies the number of available options --&gt; multiple                        &lt;!-- Allows for multiple option selections --&gt; required                        &lt;!-- Requires that a value is selected before submitting the form --&gt; autofocus                       &lt;!-- Specifies that the dropdown automatically comes to focus once the page loads --&gt;  &lt;optgroup&gt;&lt;/optgroup&gt;           &lt;!-- Specifies the entire grouping of available options --&gt;  &lt;option value=\"\"&gt;&lt;/option&gt;      &lt;!-- Defines one of the avaialble option from the dropdown list --&gt;  &lt;button&gt;&lt;/button&gt;               &lt;!-- A clickable button to submit the form --&gt;   Tables Formatting   &lt;table&gt;&lt;/table&gt;                 &lt;!-- Defines and contains all table related content --&gt; &lt;caption&gt;&lt;/caption&gt;             &lt;!-- A description of what table is and what it contains --&gt; &lt;thead&gt;&lt;/thead&gt;                 &lt;!-- The table headers contain the type of information defined in each column underneath --&gt; &lt;tbody&gt;&lt;/tbody&gt;                 &lt;!-- Contains the tables data or information --&gt; &lt;tfoot&gt;&lt;/tfoot&gt;                 &lt;!-- Defines table footer --&gt; &lt;tr&gt;&lt;/tr&gt;                       &lt;!-- Contains the information to be included in a table row --&gt; &lt;th&gt;&lt;/th&gt;                       &lt;!-- Contains the information to be included in a single table header --&gt; &lt;td&gt;&lt;/td&gt;                       &lt;!-- Contains actual information in a table cell --&gt; &lt;colgroup&gt;&lt;/colgroup&gt;           &lt;!-- Groups a single or multiple columns for formatting purposes --&gt; &lt;col&gt;                           &lt;!-- Defines a single column of information inside a table --&gt;   ## Objects and iFrames  ```html &lt;object data=\"\"&gt;&lt;/object&gt;       &lt;!-- Describes and embed file type including audio, video, PDF's, images --&gt;  &lt;!-- Supported attributes --&gt; type=\"\"                         &lt;!-- Describes the type of media embedded --&gt; height=\"\"                       &lt;!-- Describes the height of the object in pixels --&gt; width=\"\"                        &lt;!-- Describes the width of the object in pixels --&gt; usemap=\"\"                       &lt;!-- This is the name of the client-side image map in the object --&gt;  &lt;iframe src=\"\" frameborder=\"0\"&gt;&lt;/iframe&gt;          &lt;!-- Contains an inline frame that allows to embed external information --&gt;                     &lt;embed src=\"\" type=\"\"&gt;          &lt;!-- Acts as a container for external application or plug-in --&gt; src=\"\"                          &lt;!-- The source of the external file you're embedding --&gt; width=\"\"                        &lt;!-- Describes the width of the iframe in pixels --&gt;   HTML5 New Tags   &lt;header&gt;&lt;/header&gt;               &lt;!-- Defines the header block for a document or a section --&gt; &lt;footer&gt;&lt;/footer&gt;               &lt;!-- Defines the footer block for a document or a section --&gt; &lt;main&gt;&lt;/main&gt;                   &lt;!-- Describes the main content of a document --&gt;  &lt;article&gt;&lt;/article&gt;             &lt;!-- Identifies an article inside a document --&gt; &lt;aside&gt;&lt;/aside&gt;                 &lt;!-- Specifies content contained in a document sidebar --&gt; &lt;section&gt;&lt;/section&gt;             &lt;!-- Defines a section of a document --&gt; &lt;details&gt;&lt;/details&gt;             &lt;!-- Describes additonal information that user can view or hide --&gt; &lt;dialog&gt;&lt;/dialog&gt;               &lt;!-- A dialog box or a window --&gt; &lt;figure&gt;&lt;/figure&gt;               &lt;!-- An independent content block featuring images, diagrams or illustrations --&gt; &lt;figcaption&gt;&lt;/figcaption&gt;       &lt;!-- Caption that describe a figure --&gt; &lt;mark&gt;&lt;/mark&gt;                   &lt;!-- Displays a portion of highlighted text with in a page content --&gt; &lt;nav&gt;&lt;/nav&gt;                     &lt;!-- Navigation links for the user in a document --&gt; &lt;menuitem&gt;&lt;/menuitem&gt;           &lt;!-- The specific menu item that a user can raise from a pop up menu --&gt; &lt;meter&gt;&lt;/meter&gt;                 &lt;!-- Describes the scalar measurement with in a known array --&gt; &lt;progress&gt;&lt;/progress&gt;           &lt;!-- Displays the progress of a task usually a progress bar --&gt; &lt;rp&gt;&lt;/rp&gt;                       &lt;!-- Describes text within the browsers that do not support ruby notations --&gt; &lt;rt&gt;&lt;/rt&gt;                       &lt;!-- Displays east asian typography character details --&gt; &lt;ruby&gt;&lt;/ruby&gt;                   &lt;!-- Describes annotations for east asian typography --&gt; &lt;summary&gt;&lt;/summary&gt;             &lt;!-- Contains a visible heading for details element --&gt; &lt;bdi&gt;&lt;/bdi&gt;                     &lt;!-- Helps you format parts of text in a different direction than other text --&gt; &lt;time&gt;&lt;/time&gt;                   &lt;!-- Identifies the time and date --&gt; &lt;wbr&gt;                           &lt;!-- A line break within the content --&gt;  &lt;!-- Some other useful tags --&gt;  &lt;canvas&gt;&lt;/canvas&gt;               &lt;!-- Allows to draw 2D shapes on the web page with the help of javascript --&gt; &lt;keygen&gt;                        &lt;!-- Represents a control for generating a public-private key pair --&gt; &lt;map&gt;&lt;/map&gt;                     &lt;!-- Specifies an image map --&gt;   Collective Character Obejcts   &amp;#34; &amp;quot; Quotation Marks - \" &amp;#38; &amp;amp; Ampersand - &amp; &amp;#60; &amp;lt; Less than sign - &lt; &amp;#62; &amp;gt; Greater than sign - &gt; &amp;#160; &amp;nbsp; Non-breaking space  &amp;#169; &amp;copy; Copyright Symbol - © &amp;#64; &amp;Uuml; @ symbol - @ &amp;#149; &amp;ouml; Small bullet - . &amp;#153; &amp;ucirc; Trademark Symbol - ™   Source   See Also   Learn X in Y minutes  ","categories": [],
        "tags": [],
        "url": "/references/cheatsheets/html5/",
        "teaser": "/assets/images/logos/logo_html5.svg"
      },{
        "title": "Javascript",
        "excerpt":"/* *******************************************************************************************  * GLOBAL OBJECTS &gt; OBJECT  * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object  * ******************************************************************************************* */  // Global object: properties Object.length                                        // length is a property of a function object, and indicates how many arguments the function expects, i.e. the number of formal parameters. This number does not include the rest parameter. Has a value of 1. Object.prototype                                     // Represents the Object prototype object and allows to add new properties and methods to all objects of type Object.  // Methods of the Object constructor Object.assign(target, ...sources)                    // Copies the values of all enumerable own properties from one or more source objects to a target object. method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object Object.create(MyObject)                              // Creates a new object with the specified prototype object and properties. The object which should be the prototype of the newly-created object. Object.defineProperty(obj, prop, descriptor)         // Adds the named property described by a given descriptor to an object. Object.defineProperties(obj, props)                  // Adds the named properties described by the given descriptors to an object. Object.entries(obj)                                  // Returns an array containing all of the [key, value] pairs of a given object's own enumerable string properties. Object.freeze(obj)                                   // Freezes an object: other code can't delete or change any properties. Object.getOwnPropertyDescriptor(obj, prop)           // Returns a property descriptor for a named property on an object. Object.getOwnPropertyDescriptors(obj)                // Returns an object containing all own property descriptors for an object. Object.getOwnPropertyNames(obj)                      // Returns an array containing the names of all of the given object's own enumerable and non-enumerable properties. Object.getOwnPropertySymbols(obj)                    // Returns an array of all symbol properties found directly upon a given object. Object.getPrototypeOf(obj)                           // Returns the prototype of the specified object. Object.is(value1, value2);                           // Compares if two values are the same value. Equates all NaN values (which differs from both Abstract Equality Comparison and Strict Equality Comparison). Object.isExtensible(obj)                             // Determines if extending of an object is allowed. Object.isFrozen(obj)                                 // Determines if an object was frozen. Object.isSealed(obj)                                 // Determines if an object is sealed. Object.keys(obj)                                     // Returns an array containing the names of all of the given object's own enumerable string properties. Object.preventExtensions(obj)                        // Prevents any extensions of an object. Object.seal(obj)                                     // Prevents other code from deleting properties of an object. Object.setPrototypeOf(obj, prototype)                // Sets the prototype (i.e., the internal [[Prototype]] property). Object.values(obj)                                   // Returns an array containing the values that correspond to all of a given object's own enumerable string properties.  // Object instances and Object prototype object (Object.prototype.property or Object.prototype.method()) // Properties obj.constructor                                      // Specifies the function that creates an object's prototype. obj.__proto__                                        // Points to the object which was used as prototype when the object was instantiated.  // Methods obj.hasOwnProperty(prop)                             // Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain. prototypeObj.isPrototypeOf(object)                   // Returns a boolean indicating whether the object this method is called upon is in the prototype chain of the specified object. obj.propertyIsEnumerable(prop)                       // Returns a boolean indicating if the internal ECMAScript [[Enumerable]] attribute is set. obj.toLocaleString()                                 // Calls toString(). obj.toString()                                       // Returns a string representation of the object. object.valueOf()                                     // Returns the primitive value of the specified object.  /* *******************************************************************************************  * GLOBAL OBJECTS &gt; ARRAY  * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array  * ******************************************************************************************* */  // Global object: properties Array.length                                         // Reflects the number of elements in an array. Array.prototype                                      // Represents the prototype for the Array constructor and allows to add new properties and methods to all Array objects.  // Global object: methods Array.from(arrayLike[, mapFn[, thisArg]])            // Creates a new Array instance from an array-like or iterable object. Array.isArray(obj)                                   // Returns true if a variable is an array, if not false. Array.of(element0[, element1[, ...[, elementN]]])    // Creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.  // Instance: properties arr.length                                           // Reflects the number of elements in an array.  // Instance: mutator methods arr.copyWithin(target, start, end)                   // Copies a sequence of array elements within the array. arr.fill(value, start, end)                          // Fills all the elements of an array from a start index to an end index with a static value. arr.pop()                                            // Removes the last element from an array and returns that element. arr.push([element1[, ...[, elementN]]])              // Adds one or more elements to the end of an array and returns the new length of the array. arr.reverse()                                        // Reverses the order of the elements of an array in place — the first becomes the last, and the last becomes the first. arr.shift()                                          // Removes the first element from an array and returns that element. arr.sort()                                           // Sorts the elements of an array in place and returns the array. array.splice(start, deleteCount, item1, item2, ...)  // Adds and/or removes elements from an array. arr.unshift([element1[, ...[, elementN]]])           // Adds one or more elements to the front of an array and returns the new length of the array.  // Instance: accessor methods arr.concat(value1[, value2[, ...[, valueN]]])        // Returns a new array comprised of this array joined with other array(s) and/or value(s). arr.includes(searchElement, fromIndex)               // Determines whether an array contains a certain element, returning true or false as appropriate. arr.indexOf(searchElement[, fromIndex])              // Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. arr.join(separator)                                  // Joins all elements of an array into a string. arr.lastIndexOf(searchElement, fromIndex)            // Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. arr.slice(begin, end)                                // Extracts a section of an array and returns a new array. arr.toString()                                       // Returns a string representing the array and its elements. Overrides the Object.prototype.toString() method. arr.toLocaleString(locales, options)                 // Returns a localized string representing the array and its elements. Overrides the Object.prototype.toLocaleString() method.  // Instance: iteration methods arr.entries()                                        // Returns a new Array Iterator object that contains the key/value pairs for each index in the array. arr.every(callback[, thisArg])                       // Returns true if every element in this array satisfies the provided testing function. arr.filter(callback[, thisArg])                      // Creates a new array with all of the elements of this array for which the provided filtering function returns true. arr.find(callback[, thisArg])                        // Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. arr.findIndex(callback[, thisArg])                   // Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. arr.forEach(callback[, thisArg])                     // Calls a function for each element in the array. arr.keys()                                           // Returns a new Array Iterator that contains the keys for each index in the array. arr.map(callback[, initialValue])                    // Creates a new array with the results of calling a provided function on every element in this array. arr.reduce(callback[, initialValue])                 // Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. arr.reduceRight(callback[, initialValue])            // Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. arr.some(callback[, initialValue])                   // Returns true if at least one element in this array satisfies the provided testing function. arr.values()                                         // Returns a new Array Iterator object that contains the values for each index in the array.   Source   See Also   Learn X in Y minutes  ","categories": [],
        "tags": [],
        "url": "/references/cheatsheets/javascript/",
        "teaser": "/assets/images/logos/logo_javascript.svg"
      },{
        "title": "Julia",
        "excerpt":"What is   Julia is an open-source, multi-platform, high-level, high-performance programming language for technical computing.   Julia has an LLVM Low-Level Virtual Machine (LLVM) is a compiler infrastructure to build intermediate and/or binary machine code. -based JIT Just-In-Time compilation occurs at run-time rather than prior to execution, which means it offers both the speed of compiled code and the flexibility of interpretation. The compiler parses the code and infers types, after which the LLVM code is generated, which in turn is compiled into native code.  compiler that allows it to match the performance of languages such as C and FORTRAN without the hassle of low-level code. Because the code is compiled on the fly you can run (bits of) code in a shell or REPL  Read-Eval-Print-Loop , which is part of the recommended workflow .   Julia is dynamically typed, provides multiple dispatch  Because function argument types are determined at run-time, the compiler can choose the implementation that is optimized for the provided arguments and the processor architecture.  , and is designed for parallelism and distributed computation.   Julia has a built-in package manager.   Julia has many built-in mathematical functions, including special functions (e.g. Gamma), and supports complex numbers right out of the box.   Julia allows you to generate code automagically thanks to Lisp-inspired macros.   Julia was born in 2012.   Basics                                                  Assignment       answer = 42 x, y, z = 1, [1:10; ], \"A string\" x, y = y, x # swap x and y                 Constant declaration       const DATE_OF_BIRTH = 2012                 End-of-line comment       i = 1 # This is a comment                 Delimited comment       #= This is another comment =#                 Chaining       x = y = z = 1  # right-to-left 0 &lt; x &lt; 3      # true 5 &lt; x != y &lt; 5 # false                 Function definition       function add_one(i)     return i + 1 end                 Insert LaTeX symbols       \\delta + [Tab]           Operators                                                  Basic arithmetic       +, -,*,/                 Exponentiation       2^3 == 8                 Division       3/12 == 0.25                 Inverse division       7\\3 == 3/7                 Remainder       x % y or rem(x,y)                 Negation       !true == false                 Equality       a == b                 Inequality       a != b or a ≠ b                 Less and larger than       &lt; and &gt;                 Less than or equal to       &lt;= or ≤                 Greater than or equal to       &gt;= or ≥                 Element-wise operation       [1, 2, 3] .+ [1, 2, 3] == [2, 4, 6] [1, 2, 3] .* [1, 2, 3] == [1, 4, 9]                 Not a number       isnan(NaN) not(!) NaN == NaN                 Ternary operator       a == b ? \"Equal\" : \"Not equal\"                 Short-circuited AND and OR       a &amp;&amp; b and a || b                 Object equivalence       a === b           The shell aka REPL                                                  Recall last result       ans                 Interrupt execution       [Ctrl] + [C]                 Clear screen       [Ctrl] + [L]                 Run program       include(\"filename.jl\")                 Get help for func is defined       ?func                 See all places where func is defined       apropos(\"func\")                 Command line mode       ;                 Package Manager mode       ]   ([Ctrl] + [C] to exit)                 Help mode       ?                 Exit special mode / Return to REPL       [Backspace] on empty line                 Exit REPL       exit() or [Ctrl] + [D]           Standard libraries   To help Julia load faster, many core functionalities exist in standard libraries that come bundled with Julia. To make their functions available, use using PackageName. Here are some Standard Libraries and popular functions.                                                  Random       rand, randn, randsubseq                 Statistics       mean, std, cor, median, quantile                 LinearAlgebra       I, eigvals, eigvecs, det, cholesky                 SparseArrays       sparse, SparseVector, SparseMatrixCSC                 Distributed       @distributed, pmap, addprocs                 Dates       DateTime, Date           Package management   Packages must be registered before they are visible to the package manager. In Julia 1.0, there are two ways to work with the package manager: either with using Pkg and using Pkg functions, or by typing ] in the REPL to enter the special interactive package management mode. (To return to regular REPL, just hit BACKSPACE on an empty line in package management mode). Note that new tools arrive in interactive mode first, then usually also become available in regular Julia sessions through Pkg module.   Using Pkg in Julia session                                                  List installed packages (human-readable)       Pkg.status()                 List installed packages (machine-readable)       Pkg.installed()                 Update all packages       Pkg.update()                 Install PackageName       Pkg.add(\"PackageName\")                 Rebuild PackageName       Pkg.build(\"PackageName\")                 Use PackageName (after install)       using PackageName                 Remove PackageName       Pkg.rm(\"PackageName\")           In Interactive Package Mode                                                  Add PackageName       add PackageName                 Remove PackageName       rm PackageName                 Update PackageName       update PackageName                 Use development version       dev PackageName or dev GitRepoUrl                 Stop using development version, revert to public release       free PackageName           Characters and strings                                                  Character       chr = 'C'                 String       str = \"A string\"                 Character code       Int('J') == 74                 Character from code       Char(74) == 'J'                 Any UTF character       chr = '\\uXXXX'     # 4-digit HEX chr = '\\UXXXXXXXX' # 8-digit HEX                 Loop through characters       for c in str     println(c) end                 Concatenation       str = \"Learn\" * \" \" * \"Julia\"                 String interpolation       a = b = 2 println(\"a * b = $(a*b)\")                 First matching character or regular expression       findfirst(isequal('i'), \"Julia\") == 4                 Replace substring or regular expression       replace(\"Julia\", \"a\" =&gt; \"us\") == \"Julius\"                 Last index (of collection)       lastindex(\"Hello\") == 5                 Number of characters       length(\"Hello\") == 5                 Regular expression       pattern = r\"l[aeiou]\"                 Subexpressions       str = \"+1 234 567 890\" pat = r\"\\+([0-9]) ([0-9]+)\" m = match(pat, str) m.captures == [\"1\", \"234\"]                 All occurrences       [m.match for m = eachmatch(pat, str)]                 All occurrences (as iterator)       eachmatch(pat, str)           Beware of multi-byte Unicode encodings in UTF-8:   10 == lastindex(\"Ångström\") != length(\"Ångström\") == 8   Strings are immutable.   Numbers                                                  Integer types       IntN and UIntN, with N ∈ {8, 16, 32, 64, 128}, BigInt                 Floating-point types       FloatN with N ∈ {16, 32, 64} BigFloat                 Minimum and maximum values by type       typemin(Int8) typemax(Int64)                 Complex types       Complex{T}                 Imaginary unit       im                 Machine precision       eps() # same as eps(Float64)                 Rounding       round()       # floating-point round(Int, x) # integer                 Type conversions       convert(TypeName, val)  # attempt/error typename(val)           # calls convert                 Global constants       pi # 3.1415... π  # 3.1415... im # real(im * im) == -1                 More constants       using Base.MathConstants           Julia does not automatically check for numerical overflow. Use package SaferIntegers for ints with overflow checking.   Random Numbers   Many random number functions require using Random.                                                  Set seed       seed!(seed)                 Random numbers       rand()   # uniform [0,1) randn()  # normal (-Inf, Inf)                 Random from Other Distribution       using Distributions my_dist = Bernoulli(0.2) # For example rand(my_dist)                 Random subsample elements from A with inclusion probability p       randsubseq(A, p)                 Random permutation elements of A       shuffle(A)           Arrays                                                  Declaration       arr = Float64[]                 Pre-allocation       sizehint!(arr, 10^4)                 Access and assignment       arr = Any[1,2] arr[1] = \"Some text\"                 Comparison       a = [1:10;] b = a      # b points to a a[1] = -99 a == b     # true                 Copy elements (not address)       b = copy(a) b = deepcopy(a)                 Select subarray from m to n       arr[m:n]                 n-element array with 0.0s       zeros(n)                 n-element array with 1.0s       ones(n)                 n-element array with #undefs       Vector{Type}(undef,n)                 n equally spaced numbers from start to stop       range(start,stop=stop,length=n)                 Array with n random Int8 elements       rand(Int8, n)                 Fill array with val       fill!(arr, val)                 Pop last element       pop!(arr)                 Pop first element       popfirst!(a)                 Push val as last element       push!(arr, val)                 Push val as first element       pushfirst!(arr, val)                 Remove element at index idx       deleteat!(arr, idx)                 Sort       sort!(arr)                 Append a with b       append!(a,b)                 Check whether val is element       in(val, arr) or val in arr                 Scalar product       dot(a, b) == sum(a .* b)                 Change dimensions (if possible)       reshape(1:6, 3, 2)' == [1 2 3; 4 5 6]                 To string (with delimiter del between elements)       join(arr, del)           Linear Algebra   For most linear algebra tools, use using LinearAlgebra.                                                  Identity matrix       I  # just use variable I. Will automatically conform to dimensions required.                 Define matrix       M = [1 0; 0 1]                 Matrix dimensions       size(M)                 Select i th row       M[i, :]                 Select i th column       M[:, i]                 Concatenate horizontally       M = [a b] or M = hcat(a, b)                 Concatenate vertically       M = [a ; b] or M = vcat(a, b)                 Matrix transposition       transpose(M)                 Conjugate matrix transposition       M' or adjoint(M)                 Matrix trace       tr(M)                 Matrix determinant       det(M)                 Matrix rank       rank(M)                 Matrix eigenvalues       eigvals(M)                 Matrix eigenvectors       eigvecs(M)                 Matrix inverse       inv(M)                 Solve M*x == v       M\\v is better  Numerically more stable and typically also faster.  than inv(M)*v                 Moore-Penrose pseudo-inverse       pinv(M)           Julia has built-in support for matrix decompositions.   Julia tries to infer whether matrices are of a special type (symmetric, hermitian, etc.), but sometimes fails. To aid Julia in dispatching the optimal algorithms, special matrices can be declared to have a structure with functions like Symmetric , Hermitian , UpperTriangular, LowerTriangular, Diagonal , and more.   Control flow and loops                                                  Conditional       if-elseif-else-end                 Simple for loop       for i in 1:10     println(i) end                 Unnested for loop       for i in 1:10, j = 1:5     println(i*j) end                 Enumeration       for (idx, val) in enumerate(arr)     println(\"the $idx-th element is $val\") end                 while loop       while bool_expr     # do stuff end                 Exit loop       break                 Exit iteration       continue           Functions   All arguments to functions are passed by reference.   Functions with ! appended change at least one argument, typically the first: sort!(arr).   Required arguments are separated with a comma and use the positional notation.   Optional arguments need a default value in the signature, defined with =.   Keyword arguments use the named notation and are listed in the function’s signature after the semicolon:   function func(req1, req2; key1=dflt1, key2=dflt2)     # do stuff end   The semicolon is not required in the call to a function that accepts keyword arguments.   The return statement is optional but highly recommended.   Multiple data structures can be returned as a tuple in a single return statement.   Command line arguments julia script.jl arg1 arg2... can be processed from global constant ARGS:   for arg in ARGS     println(arg) end   Anonymous functions can best be used in collection functions or list comprehensions: x -&gt; x^2.   Functions can accept a variable number of arguments:   function func(a...)     println(a) end  func(1, 2, [3:5]) # tuple: (1, 2, UnitRange{Int64}[3:5])   Functions can be nested:   function outerfunction()     # do some outer stuff     function innerfunction()         # do inner stuff         # can access prior outer definitions     end     # do more outer stuff end   Functions can have explicit return types   # take any Number subtype and return it as a String function stringifynumber(num::T)::String where T &lt;: Number     return \"$num\" end   Functions can be vectorized by using the Dot Syntax   # here we broadcast the subtraction of each mean value # by using the dot operator julia&gt; using Statistics julia&gt; A = rand(3, 4); julia&gt; B = A .- mean(A, dims=1) 3×4 Array{Float64,2}:   0.0387438     0.112224  -0.0541478   0.455245   0.000773337   0.250006   0.0140011  -0.289532  -0.0395171    -0.36223    0.0401467  -0.165713 julia&gt; mean(B, dims=1) 1×4 Array{Float64,2}:  -7.40149e-17  7.40149e-17  1.85037e-17  3.70074e-17   Julia generates specialized versions Multiple dispatch a type of polymorphism that dynamically determines which version of a function to call. In this context, dynamic means that it is resolved at run-time, whereas method overloading is resolved at compile time. Julia manages multiple dispatch completely in the background. Of course, you can provide custom function overloadings with type annotations.  of functions based on data types. When a function is called with the same argument types again, Julia can look up the native machine code and skip the compilation process.   Since Julia 0.5 the existence of potential ambiguities is still acceptable, but actually calling an ambiguous method is an immediate error.   Stack overflow is possible when recursive functions nest many levels deep. Trampolining can be used to do tail-call optimization, as Julia does not do that automatically yet. Alternatively, you can rewrite the tail recursion as an iteration.   Dictionaries                                                  Dictionary       d = Dict(key1 =&gt; val1, key2 =&gt; val2, ...) d = Dict(:key1 =&gt; val1, :key2 =&gt; val2, ...)                 All keys (iterator)       keys(d)                 All values (iterator)       values(d)                 Loop through key-value pairs       for (k,v) in d     println(\"key: $k, value: $v\") end                 Check for key :k       haskey(d, :k)                 Copy keys (or values) to array       arr = collect(keys(d)) arr = [k for (k,v) in d]           Dictionaries are mutable; when symbols are used as keys, the keys are immutable.   Sets                                                  Declaration       s = Set([1, 2, 3, \"Some text\"])                 Union s1 ∪ s2       union(s1, s2)                 Intersection s1 ∩ s2       intersect(s1, s2)                 Difference s1 \\\\ s2       setdiff(s1, s2)                 Difference s1 △ s2       symdiff(s1, s2)                 Subset s1 ⊆ s2       issubset(s1, s2)                 Checking whether an element is contained in a set is done in O(1).   Collection functions                                                  Apply f to all elements of collection coll       map(f, coll) or map(coll) do elem     # do stuff with elem     # must contain return end                 Filter coll for true values of f       filter(f, coll)                 List comprehension       arr = [f(elem) for elem in coll]           Types   Julia has no classes and thus no class-specific methods.   Types are like classes without methods.   Abstract types can be subtyped but not instantiated.   Concrete types cannot be subtyped.   By default, struct s are immutable.   Immutable types enhance performance and are thread safe, as they can be shared among threads without the need for synchronization.   Objects that may be one of a set of types are called Union types.                                                  Type annotation       var::TypeName                 Type declaration       struct Programmer     name::String     birth_year::UInt16     fave_language::AbstractString end                 Mutable type declaration       replace struct with mutable struct                 Type alias       const Nerd = Programmer                 Type constructors       methods(TypeName)                 Type instantiation       me = Programmer(\"Ian\", 1984, \"Julia\") me = Nerd(\"Ian\", 1984, \"Julia\")                 Subtype declaration       abstract type Bird end struct Duck &lt;: Bird     pond::String end                 Parametric type       struct Point{T &lt;: Real}     x::T     y::T end  p =Point{Float64}(1,2)                  Union types       Union{Int, String}                 Traverse type hierarchy       supertype(TypeName) and subtypes(TypeName)                 Default supertype       Any                 All fields       fieldnames(TypeName)                 All field types       TypeName.types           When a type is defined with an inner constructor, the default outer constructors are not available and have to be defined manually if need be. An inner constructor is best used to check whether the parameters conform to certain (invariance) conditions. Obviously, these invariants can be violated by accessing and modifying the fields directly, unless the type is defined as immutable. The new keyword may be used to create an object of the same type.   Type parameters are invariant, which means that Point{Float64} &lt;: Point{Real} is false, even though Float64 &lt;: Real. Tuple types, on the other hand, are covariant: Tuple{Float64} &lt;: Tuple{Real}.   The type-inferred form of Julia’s internal representation can be found with code_typed(). This is useful to identify where Any rather than type-specific native code is generated.   Missing and Nothing                                                  Programmers Null       nothing                 Missing Data       missing                 Not a Number in Float       NaN                 Filter missings       collect(skipmissing([1, 2, missing])) == [1,2]                 Replace missings       collect((df[:col], 1))                 Check if missing       ismissing(x) not x == missing           Exceptions                                                  Throw SomeExcep       throw(SomeExcep())                 Rethrow current exception       rethrow()                 Define NewExcep       struct NewExcep &lt;: Exception     v::String end  Base.showerror(io::IO, e::NewExcep) = print(io, \"A problem with $(e.v)!\")  throw(NewExcep(\"x\"))                 Throw error with msg text       error(msg)                 Handler       try     # do something potentially iffy catch ex     if isa(ex, SomeExcep)         # handle SomeExcep     elseif isa(ex, AnotherExcep)         # handle AnotherExcep     else         # handle all others     end finally     # do this in any case end           Modules   Modules are separate global variable workspaces that group together similar functionality.                                                  Definition       module PackageName # add module definitions # use export to make definitions accessible end                 Include filename.jl       include(\"filename.jl\")                 Load       using ModuleName        # all exported names using ModuleName: x, y              # only x, y import ModuleName       # only ModuleName import ModuleName: x, y             # only x, y import ModuleName.x, ModuleName.y   # only x, y                 Exports       # Get an array of names exported by Module names(ModuleName)  # include non-exports, deprecateds # and compiler-generated names names(ModuleName, all::Bool)  #also show names explicitly imported from other modules names(ModuleName, all::Bool, imported::Bool)           With using Foo you need to say function Foo.bar(... to extend module Foo’s function bar with a new method, but with import Foo.bar, you only need to say function bar(... and it automatically extends module Foo’s function bar .   Expressions   Julia is homoiconic: programs are represented as data structures of the language itself. In fact, everything is an expression Expr.   Symbols are interned strings  Only one copy of each distinct (immutable) string value is stored.  prefixed with a colon. Symbols are more efficient and they are typically used as identifiers, keys (in dictionaries), or columns in data frames. Symbols cannot be concatenated.   Quoting :( ... ) or quote ... end creates an expression, just like Meta.parse(str)  This form is probably most familiar to people with knowledge of dynamic SQL. The Meta.parse function is similar to Oracle”s and PostgreSQL”s EXECUTE IMMEDIATE statement or SQL Server’s sp_executesql() procedure.  , and Expr(:call, ...).   x = 1 line = \"1 + $x\"         # some code expr = Meta.parse(line) # make an Expr object typeof(expr) == Expr    # true dump(expr)              # generate abstract syntax tree eval(expr) == 2         # evaluate Expr object: true   Macros   Macros allow generated code (i.e. expressions) to be included in a program.                                                  Definition       macro macroname(expr)     # do stuff end                 Usage       macroname(ex1, ex2, ...) or @macroname ex1, ex2, ...                 Built-in macros       @test           # equal (exact) @test x ≈ y    # isapprox(x, y) @assert         # assert (unit test) @which          # types used @time           # time and memory statistics @elapsed        # time elapsed @allocated      # memory allocated @profile        # profile @spawn          # run at some worker @spawnat        # run at specified worker @async          # asynchronous task @distributed    # parallel for loop @everywhere     # make available to workers           Rules for creating hygienic macros:      Declare variables inside macro with local .   Do not call eval inside macro.   Escape interpolated expressions to avoid expansion: $(esc(expr))   Parallel Computing   Parallel computing tools are available in the Distributed standard library.                                                  Launch REPL with N workers       julia -p N                 Number of available workers       nprocs()                 Add N workers       addprocs(N)                 See all worker ids       for pid in workers()     println(pid) end                 Get id of executing worker       myid()                 Remove worker       rmprocs(pid)                 Run f with arguments args on pid       r = remotecall(f, pid, args...) # or: r = @spawnat pid f(args) ... fetch(r)                 Run f with arguments args on pid (more efficient)       remotecall_fetch(f, pid, args...)                 Run f with arguments args on any worker       r = @spawn f(args) ... fetch(r)                 Run f with arguments args on all workers       r = [@spawnat w f(args) for w in workers()] ... fetch(r)                 Make expr available to all workers       @everywhere expr                 Parallel for loop with reducerA reducer combines the results from different (independent) workers. function red       sum = @distributed (red) for i in 1:10^6     # do parallelstuff end                 Apply f to all elements in collection coll       pmap(f, coll)           Workers are also known as concurrent/parallel processes.   Modules with parallel processing capabilities are best split into a functions file that contains all the functions and variables needed by all workers, and a driver file that handles the processing of data. The driver file obviously has to import the functions file.   A non-trivial (word count) example of a reducer function is provided by Adam DeConinck.   IO                                                  Read stream       stream = stdin for line in eachline(stream)     # do stuff end                 Read file       open(filename) do file     for line in eachline(file)         # do stuff     end end                 Read CSV file       using CSV data = CSV.read(filename)                 Write CSV file       using CSV CSV.write(filename, data)                 Save Julia Object       using JLD save(filename, \"object_key\", object, ...)                 Load Julia Object       using JLD d = load(filename) # Returns a dict of objects                 Save HDF5       using HDF5 h5write(filename, \"key\", object)                 Load HDF5       using HDF5 h5read(filename, \"key\")           DataFrames   For dplyr-like tools, see DataFramesMeta.jl.                                                  Read Stata, SPSS, etc.       StatFiles Package                 DescribeSimilar to summary(df) in R. data frame       describe(df)                 Make vector of column col       v = df[:col]                 Sort by col       sort!(df, [:col])                 CategoricalSimilar to df$col = as.factor(df$col) in R. col       categorical!(df, [:col])                 List col levels       levels(df[:col])                 All observations with col==val       df[df[:col] .== val, :]                 Reshape from wide to long format       stack(df, [1:n; ]) stack(df, [:col1, :col2, ...]) melt(df, [:col1, :col2])                 Reshape from long to wide format       unstack(df, :id, :val)                 Make Nullable       allowmissing!(df) or allowmissing!(df, :col)                 Loop over Rows       for r in eachrow(df)     # do stuff.     # r is Struct with fields of col names. end                 Loop over Columns       for c in eachcol(df)     # do stuff.     # c is tuple with name, then vector end                 Apply func to groups       by(df, :group_col, func)                 Query       using Query query = @from r in df begin     @where r.col1 &gt; 40     @select {new_name=r.col1, r.col2}     @collect DataFrame # Default: iterator end           Introspection and reflection                                                  Type       typeof(name)                 Type check       isa(name, TypeName)                 List subtypes       subtypes(TypeName)                 List supertype       supertype(TypeName)                 Function methods       methods(func)                 JIT bytecode       code_llvm(expr)                 Assembly code       code_native(expr)           Noteworthy packages and projects   Many core packages are managed by communities with names of the form Julia[Topic].                                                  Statistics       JuliaStats                 Differential Equations       JuliaDiffEq (DifferentialEquations.jl)                 Automatic differentiation       JuliaDiff                 Numerical optimization       JuliaOpt                 Plotting       JuliaPlots                 Network (Graph) Analysis       JuliaGraphs                 Web       JuliaWeb                 Geo-Spatial       JuliaGeo                 Machine Learning       JuliaML                 Super-used Packages       DataFrames    # linear/logistic regression Distributions # Statistical distributions Flux          # Machine learning Gadfly        # ggplot2-likeplotting LightGraphs   # Network analysis TextAnalysis  # NLP           Naming Conventions   The main convention in Julia is to avoid underscores unless they are required for legibility.   Variable names are in lower (or snake) case: somevariable.   Constants are in upper case: SOMECONSTANT.   Functions are in lower (or snake) case: somefunction.   Macros are in lower (or snake) case: @somemacro.   Type names are in initial-capital camel case: SomeType.   Julia files have the jl extension.   For more information on Julia code style visit the manual: style guide .   Performance tips      Avoid global variables.   Write type-stable code.   Use immutable types where possible.   Use sizehint! for large arrays.   Free up memory for large arrays with arr = nothing.   Access arrays along columns, because multi-dimensional arrays are stored in column-major order.   Pre-allocate resultant data structures.   Disable the garbage collector in real-time applications: disable_gc().   Avoid the splat (...) operator for keyword arguments.   Use mutating APIs (i.e. functions with ! to avoid copying data structures.   Use array (element-wise) operations instead of list comprehensions.   Avoid try-catch in (computation-intensive) loops.   Avoid Any in collections.   Avoid abstract types in collections.   Avoid string interpolation in I/O.   Vectorizing does not improve speed (unlike R, MATLAB or Python).   Avoid eval at run-time.   IDEs Editors and Plugins      Juno (editor)   JuliaBox (online IJulia notebook)   Jupyter (online IJulia notebook)   Emacs Julia mode (editor)   vim Julia mode (editor)   VS Code extension (editor)   Source   See Also      Learn X in Y minutes   Official documentation   Learning Julia   Month of Julia   Community standards   Julia: A fresh approach to numerical computing   Julia: A Fast Dynamic Language for Technical Computing   Videos      The 5th annual JuliaCon 2018   The 4th annual JuliaCon 2017 (Berkeley)   The 3rd annual JuliaCon 2016   Getting Started with Julia by Leah Hanson   Intro to Julia by Huda Nassar   Introduction to Julia for Pythonistas by John Pearson  ","categories": [],
        "tags": [],
        "url": "/references/cheatsheets/julia/",
        "teaser": "/assets/images/logos/logo_julia.svg"
      },{
        "title": "Latex",
        "excerpt":"Overview   % All comment lines start with %. There are no multi-line comments % Every LaTeX command starts with a backslash (\\)   % Preamble %----------------------------------------------- % Document Class \\documentclass[12pt]{article}  % Packages \\usepackage{caption}     % Sets figure captions \\usepackage{float}       % Allows figures to float \\usepackage{hyperref}    % Allows hyperlinks  % Document Properties Definitions \\author{Author's name}  \\date{\\today} \\title{Title}   % Document %----------------------------------------------- \\begin{document}  % Title \\maketitle \\newpage          % Creates a new page  % Tables of Content \\tableofcontents % Main table of content \\newpage \\listoffigures   % List of figures \\newpage \\listoftables    % List of tables \\newpage  % Abstract: command is available in the document classes article and report. \\begin{abstract}  \\LaTeX{} documentation written as \\LaTeX! How novel and totally not  my idea! \\end{abstract}  % Sections \\section{Introduction} Hello, my name is Colton and together we're going to explore \\LaTeX!  \\section{Another section} This is the text for another section. I think it needs a subsection.  \\subsection{This is a subsection} % Subsections are also intuitive. I think we need another one.  \\subsubsection{Pythagoras} Much better now. \\label{subsec:pythagoras}  \\section*{This is an unnumbered section} However not all sections have to be numbered!  \\section{Some Text notes} \\LaTeX{} is generally pretty good about placing text where it should go. If a line \\\\ needs \\\\ to \\\\ break \\\\ you add \\textbackslash\\textbackslash{} to the source code.  Separate paragraphs by empty lines.  You need to add a backslash after abbreviations (if not followed by a comma), because otherwise the spacing after the dot is too large: E.g., i.e., etc.\\ are are such abbreviations.  \\section{Lists} \\begin{enumerate} % This creates an \"enumerate\" environment.   % \\item tells the enumerate to increment   \\item Salad.   \\item 27 watermelon.   \\item A single jackrabbit.   % we can even override the item number by using []   \\item[how many?] Medium sized squirt guns.    Not a list item, but still part of the enumerate. \\end{enumerate} % All environments must have an end.  \\section{Math}  Here's how you state all x that belong to X, $\\forall x \\in X$. We can also enter math mode with \\[a^2 + b^2 = c^2 \\].  % Display math with the equation 'environment' \\begin{equation} % enters math-mode     c^2 = a^2 + b^2.     \\label{eq:pythagoras} % for referencing \\end{equation} % all \\begin statements must have an end statement  Eqn.~\\ref{eq:pythagoras} is also known as the Pythagoras Theorem which is also the subject of Sec.~\\ref{subsec:pythagoras}. A lot of things can be labeled: figures, equations, sections, etc.   \\section{Figures}  % See https://en.wikibooks.org/wiki/LaTeX/Floats,_Figures_and_Captions for more details  \\begin{figure}[H] % H here denoted the placement option.     \\centering % centers the figure on the page     % Inserts a figure scaled to 0.8 the width of the page.     %\\includegraphics[width=0.8\\linewidth]{right-triangle.png}     % Commented out for compilation purposes. Please use your imagination.     \\caption{Right triangle with sides $a$, $b$, $c$}     \\label{fig:right-triangle} \\end{figure}  \\subsection{Table}  \\begin{table}[H]   \\caption{Caption for the Table.}   % The basic is simple: one letter for each column, to control alignment:   % basic options are: c, l, r and p for centered, left, right and paragraph   % optionnally, you can add a | for a vertical line   % See https://en.wikibooks.org/wiki/LaTeX/Tables for more details   \\begin{tabular}{c|cc}  % here it means \"centered | vertical line, centered centered\"     Number &amp;  Last Name &amp; First Name \\\\ % Column rows are separated by &amp;     \\hline % a horizontal line     1 &amp; Biggus &amp; Dickus \\\\     2 &amp; Monty &amp; Python   \\end{tabular} \\end{table}  \\section{Getting \\LaTeX{} to not compile something (i.e.\\ Source Code)}  % There are other packages that exist (i.e. minty, lstlisting, etc.) % but verbatim is the bare-bones basic one. \\begin{verbatim}   print(\"Hello World!\")   a%b; % look! We can use % signs in verbatim.   random = 4; #decided by fair random dice roll, https://www.xkcd.com/221/   See https://www.explainxkcd.com/wiki/index.php/221:_Random_Number \\end{verbatim}  \\section{Compiling}  \\begin{enumerate}   \\item Write the document in plain text (the ``source code'').   \\item Compile source code to produce a pdf.     The compilation step looks like this (in Linux): \\\\     \\begin{verbatim}       &gt; pdflatex learn-latex.tex     \\end{verbatim} \\end{enumerate}  \\section{Hyperlinks}  There exists two main types of links: visible URL \\\\ \\url{https://learnxinyminutes.com/docs/latex/}, or \\href{https://learnxinyminutes.com/docs/latex/}{shadowed by text} % You can not add extra-spaces or special symbols into shadowing text since it % will cause mistakes during the compilation  This package also produces list of thumbnails in the output pdf document and active links in the table of contents.  \\section{Writing in ASCII or other encodings}  It is easy to insert accents and basic Latin symbols, with backslash shortcuts Like \\,c, \\'e, \\`A, \\ae and \\oe etc.  % for ç, é, À, etc % See https://en.wikibooks.org/wiki/LaTeX/Special_Characters#Escaped_codes for more  To write directly in UTF-8, when compiling with pdflatex, use \\begin{verbatim}     \\usepackage[utf8]{inputenc} \\end{verbatim} The selected font has to support the glyphs used for your document, you have to add \\begin{verbatim}     \\usepackage[T1]{fontenc} \\end{verbatim}   \\section{End}  That's all for now!  % Bibliography \\begin{thebibliography}{1}   \\bibitem{latexwiki} The amazing \\LaTeX{} wikibook: \\emph{https://en.wikibooks.org/wiki/LaTeX}   \\bibitem{latextutorial} An actual tutorial: \\emph{http://www.latex-tutorial.com} \\end{thebibliography}  % Ends the document \\end{document}   Document Classes   Usage: \\documentclass[opt,opt]{class}.   Classes   book    % Default is two-sided. report  % No \\part divisions. article % No \\part or \\chapter divisions. letter  % Letter. slides  % Large sans-serif font.   Common options   10pt/11pt/12pt       % Font size. letterpaper/a4paper  % Paper size. twocolumn            % Use two columns. twoside              % Set margins for two-sided. landscape            % Landscape orientation. Must use dvips -t landscape. draft                % Double-space lines.   Packages   \\usepackage{fullpage}  % uses 1 inch margins. \\usepackage{anysize}   % sets margins: \\marginsize{l}{r}{t}{b} \\usepackage{multicol}  % uses n columns: \\begin{multicols}{n}. \\usepackage{lscape}    % allows a page to be rendered in landscape mode \\usepackage{appendix}  % allows appendix section to be included \\usepackage{lettrine}  % supports various dropped capitals styles \\usepackage{hyperref}  % allows hyperlinks \\usepackage{url}       % inserts URL: \\url{http://... }. \\usepackage{latexsym}  % uses \\LaTeX\\ symbol font.  \\usepackage{graphicx}  % shows image: \\includegraphics[width=x]{file}. \\usepackage{epstopdf}  % convert eps figures to pdf \\usepackage{caption}   % sets figure captions \\usepackage{subcaption}% captions for the subfigures \\usepackage{float}     % allows figures to float  \\usepackage{amsmath}   % American Mathematical Society package (allows \\eqref) \\usepackage{amssymb}   % American Mathematical Society extra symbols \\usepackage{amsthm}    % offers the theorem setup of the AMS document classes \\usepackage{cancel}    % allows showing canceled terms in equations  \\usepackage{tabularx}  % an extension of tabular which has an additional column designator, X, which creates a paragraph-like column whose width automatically expands so that the declared width of the environment is filled \\usepackage{booktabs}  % enhances the quality of tables and provides extra commands \\usepackage{multirow}  % tables with cell occuping more than one row \\usepackage{threeparttable} % tables with footnotes \\usepackage{placeins}  % defines a \\FloatBarrier command, beyond which floats may not pass   Title   Usage: \\maketitle  \\author{text}          % Author of document. \\title{text}           % Title of document. \\date{text}            % Date.   Page Style   \\pagestyle{empty}      % Both header and footer are cleared \\pagestyle{plain}      % Header is clear, but the footer contains the page number in the center. \\pagestyle{headings}   % Footer is blank, header displays information according to document class (e.g., section name) and page number top right. \\pagestyle{myheadings} % Page number is top right, and it is possible to control the rest of the header.   Tables of Content   \\tableofcontents % Adds a table of content. \\listoffigures   % List of figures \\listoftables    % List of tables   Document Structure   \\setcounter{secnumdepth}{x} % suppresses heading numbers of depth &gt; x, where chapter has depth 0.   \\part{title} \\chapter{title} \\section{title} \\section*{title}, % not numbers the section and it does not appear in the table of contents \\subsection{title} \\subsubsection{title} \\paragraph{title} \\subparagraph{title}   Text Environments   \\begin{comment}   % Comment (not printed). Requires verbatim package. \\begin{quote}     % Indented quotation block. \\begin{quotation} % Like quote with indented paragraphs. \\begin{verse}     % Quotation block for verse.   Text Properties   Font Face                  Command       Declaration       Effect                       \\textrm{text}       {\\rmfamily text}       Roman family                 \\textsf{text}       {\\sffamily text}       Sans serif family                 \\texttt{text}       {\\ttfamily text}       Typewriter family                 \\textmd{text}       {\\mdseries text}       Medium series                 \\textbf{text}       {\\bfseries text}       Bold series                 \\textup{text}       {\\upshape text}       Upright shape                 \\textit{text}       {\\itshape text}       Italic shape                 \\textsl{text}       {\\slshape text}       Slanted shape                 \\textsc{text}       {\\scshape text}       Small Caps shape                 \\emph{text}       {\\em text}       Emphasized                 \\textnormal{text}       {\\normalfont text}       Document font                 \\underline{text}               Underline           Font size   Usage {\\command text }   \\tiny         % tiny \\scriptsize   % scriptsize \\footnotesize % footnotesize \\small        % small \\normalsize   % normalsize \\large        % large \\Large        % Large \\LARGE        % LARGE \\huge         % huge \\Huge         % Huge   &lt;!–  Verbatim text  \\begin{verbatim} Verbatim environment. \\begin{verbatim*} Spaces are shown as . \\verb!text! Text between the delimiting characters (in this case `!’) is verbatim.   Justification  Environment Declaration \\begin{center} \\centering \\begin{flushleft} \\raggedright \\begin{flushright} \\raggedleft   Miscellaneous  \\linespread{x} changes the line spacing by the multiplier x.   Symbols  &amp; \\&amp; _ . . . \\ldots \u000f \\textbullet $ $ ^ \\^{} j \\textbar n \\textbackslash % \\% ~ ~{} # # x \\S   Accents  \u0012o `o \u0013o 'o ^o \\^o ~o ~o \u0016o =o _o .o o \"o \u0018o \\c o \u0014o \\v o }o \\H o \u0018c \\c c o. \\d o o \u0016 \\b o oo \\t oo \u001b \\oe \u001e \\OE  ","categories": [],
        "tags": [],
        "url": "/references/cheatsheets/latex/",
        "teaser": "/assets/images/logos/logo_latex.svg"
      },{
        "title": "Linux",
        "excerpt":"Basics   env                 # displays all environment variables  echo $SHELL         # displays the shell you're using echo $BASH_VERSION  # displays bash version echo $PATH          # displays the path content echo $HOME          # displays the home directory path  bash                # if you want to use bash (type exit to go back to your previously opened shell) whereis cmd         # locates the binary, source and manual-page for a command which cmd           # finds out which program is executed as 'bash' (default: /bin/bash, can change across environments)  clear               # clears content on window (hide displayed lines)  shopt               # sets options for the shell  sudo -s             # login as root  exit                # logs out of current session   Shortcuts   CTRL+A  # move to beginning of line CTRL+B  # moves backward one character CTRL+C  # halts the current command CTRL+D  # deletes one character backward or logs out of current session, similar to exit CTRL+E  # moves to end of line CTRL+F  # moves forward one character CTRL+G  # aborts the current editing command and ring the terminal bell CTRL+H  # deletes one character under cursor (same as DELETE) CTRL+J  # same as RETURN CTRL+K  # deletes (kill) forward to end of line CTRL+L  # clears screen and redisplay the line CTRL+M  # same as RETURN CTRL+N  # next line in command history CTRL+O  # same as RETURN, then displays next line in history file CTRL+P  # previous line in command history CTRL+Q  # resumes suspended shell output CTRL+R  # searches backward CTRL+S  # searches forward or suspends shell output CTRL+T  # transposes two characters CTRL+U  # kills backward from point to the beginning of line CTRL+V  # makes the next character typed verbatim CTRL+W  # kills the word behind the cursor CTRL+X  # lists the possible filename completions of the current word CTRL+Y  # retrieves (yank) last item killed CTRL+Z  # stops the current command, resume with fg in the foreground or bg in the background  ALT+B   # moves backward one word ALT+D   # deletes next word ALT+F   # moves forward one word ALT+H   # deletes one character backward ALT+T   # transposes two words ALT+.   # pastes last word from the last command. Pressing it repeatedly traverses through command history. ALT+U   # capitalizes every character from the current cursor position to the end of the word ALT+L   # uncapitalizes every character from the current cursor position to the end of the word ALT+C   # capitalizes the letter under the cursor. The cursor then moves to the end of the word. ALT+R   # reverts any changes to a command you’ve pulled from your history if you’ve edited it. ALT+?   # list possible completions to what is typed ALT+^   # expand line to most recent match from history  CTRL+X then (        # start recording a keyboard macro CTRL+X then )        # finish recording keyboard macro CTRL+X then E        # recall last recorded keyboard macro CTRL+X then CTRL+E   # invoke text editor (specified by $EDITOR) on current command line then execute resultes as shell commands  BACKSPACE  # deletes one character backward DELETE     # deletes one character under cursor  !!       # repeats last command !_abc_   # runs last command starting with _abc_ !_abc_:p # prints last command starting with _abc_ !$       # last argument of previous command ALT-.    # last argument of previous command !\\*      # all arguments of previous command ^_abc_^_123_ # runs previous command, replacing _abc_ with _123_    History   history   # shows command line history !!        # repeats the last command !&lt;n&gt;      # refers to command line 'n' !&lt;string&gt; # refers to command starting with 'string' !$        # refers to last argument of previous command ALT-.     # refers to last argument of previous command !\\*       # refers to all arguments of previous command ^_abc_^_123_ # runs previous command, replacing _abc_ with _123_   File Commands   ls                            # lists your files in current directory, ls &lt;dir&gt; to print files in a specific directory ls -l                         # lists your files in 'long format', which contains the exact size of the file, who owns the file and who has the right to look at it, and when it was last modified ls -a                         # lists all files in 'long format', including hidden files (name beginning with '.') ls -R                         # lists recursively ls -r                         # lists in reverse order ls -t                         # lists sorting by last modified ls -1                         # lists one file per line ls -m                         # lists files separated by comma ls -Q                         # lists files quoted ln -s &lt;filename&gt; &lt;link&gt;       # creates symbolic link to file readlink &lt;filename&gt;           # shows where a symbolic links points to tree                          # show directories and subdirectories in easilly readable file tree mc                            # terminal file explorer (alternative to ncdu) touch &lt;filename&gt;              # creates or updates (edit) your file file &lt;filename&gt;               # gets type of the file mktemp -t &lt;filename&gt;          # make a temp file in /tmp/ which is deleted at next boot (-d to make directory) cat &lt;filename&gt;                # prints file raw content (will not be interpreted) any_command &gt; &lt;filename&gt;      # '&gt;' is used to perform redirections, it will set any_command's stdout to file instead of \"real stdout\" (generally /dev/stdout) more &lt;filename&gt;               # shows the first part of a file (move with space and type q to quit) head -n &lt;nr&gt; &lt;filename&gt;       # outputs the first &lt;nr&gt; lines (default: 10 lines) of file  tail -n &lt;nr&gt; &lt;filename&gt;       # outputs the last &lt;nr&gt; lines (default: 10 lines) of file  tail -F &lt;filename&gt;            # outputs the last lines of file as it changes (default: 10 lines) more &lt;filename&gt;               # shows and paginate the file less &lt;filename&gt;               # shows and paginate the file, being faster and more resourceful than \"more\" vim &lt;filename&gt;                # opens a file in VIM (VI iMproved) text editor, will create it if it doesn't exist mv &lt;filename1&gt; &lt;dest&gt;         # moves a file to destination, behavior will change based on 'dest' type (dir: file is placed into dir; file: file will replace dest (tip: useful for renaming)) cp &lt;filename1&gt; &lt;dest&gt;         # copies a file rm &lt;filename&gt;                 # removes a file diff &lt;filename1&gt; &lt;filename2&gt;  # compares files, and shows where they differ wc &lt;filename&gt;                 # tells you how many lines, words and characters there are in a file. Use -lwc (lines, word, character) to ouput only 1 of those informations sort &lt;filename&gt;               # sorts the contents of a text file line by line in alphabetical order, use -n for numeric sort and -r for reversing order. sort -t -k &lt;filename&gt;         # sorts the contents on specific sort key field starting from 1, using the field separator t. rev                           # reverse string characters (hello becomes olleh) gzip &lt;filename&gt;               # compresses files using gzip algorithm gunzip &lt;filename&gt;             # uncompresses files compressed by gzip gzcat &lt;filename&gt;              # lets you look at gzipped file without actually having to gunzip it lpr &lt;filename&gt;                # prints the file lpq                           # checks out the printer queue lprm &lt;jobnumber&gt;              # removes something from the printer queue genscript                     # converts plain text files into postscript for printing and gives you some options for formatting dvips &lt;filename&gt;              # prints .dvi files (i.e. files produced by LaTeX) head -n file_name | tail +n   # Print nth line from file. head -y lines.txt | tail +x   # want to display all the lines from x to y. This includes the xth and yth lines.   Directory Commands   mkdir &lt;dirname&gt;               # makes a new directory rmdir &lt;dirname&gt;               # remove an empty directory rmdir -rf &lt;dirname&gt;           # remove a non-empty directory mv &lt;dir1&gt; &lt;dir2&gt;              # rename a directory from &lt;dir1&gt; to &lt;dir2&gt; cd                            # changes to home cd ..                         # changes to the parent directory cd &lt;dirname&gt;                  # changes directory cp -r &lt;dir1&gt; &lt;dir2&gt;           # copy &lt;dir1&gt; into &lt;dir2&gt; including sub-directories pwd                           # tells you where you currently are cd ~                          # changes to home. cd -                          # changes to previous working directory ls -d */                      # lists all subfolders in the current folder   Search Files and Directories   grep &lt;pattern&gt; &lt;filename&gt;     # looks for the string in the files grep -r &lt;pattern&gt; &lt;directory&gt; # search recursively for pattern in directory grep -i &lt;pattern&gt; &lt;filename&gt;  # searches in case insensitive mode for the string in the files grep -v &lt;pattern&gt; &lt;filename&gt;  # searches for lines of &lt;filename&gt; that don't contain &lt;pattern&gt; grep -o &lt;pattern&gt; &lt;filename&gt;  # shows only the part of a line matching &lt;pattern&gt;  find . -name &lt;name or regex&gt; # searches for file &lt;name&gt; or for files matching the &lt;regex&gt; expression in the current directory and all its sub-directories find . -type &lt;type&gt; # searches for files (-type f) or directories (-type d) in the current directory and all its sub-directories find . -user &lt;user&gt; # searches for files owned by &lt;user&gt; find . -mmin &lt;minutes&gt; # searches for files in the current directory and all its sub-directories that were modifed less than &lt;minutes&gt; ago locate _file_ # Find _file_ (quick search of system index)   File and Directory Permis­sions   First digit is owner permis­sion, second is group and third is everyone.   chmod -options MODE &lt;filename&gt;  # lets you change the read, write, and execute permissions of &lt;filename&gt; to MODE for respectively the owner, the group and everyone. chmod 775 &lt;filename&gt;       # changes permissions of &lt;filename&gt; to 775 chmod -R 600 &lt;foldername&gt;  # applies chmod 600 recurs­ively chmod to &lt;foldername&gt; chown &lt;username&gt;:&lt;group&gt; &lt;filename&gt; # Change &lt;filename&gt; owner to &lt;username&gt; and group to &lt;group&gt;                  Number       Permission Type       Symbol                       0       No Permission       ---                 1       Execute       --x                 2       Write       -w-                 3       Execute + Write       -wx                 4       Read       r--                 5       Read + Execute       r-x                 6       Read +Write       rw-                 7       Read + Write +Execute       rwx           System Info   whoami                   # returns your username passwd                   # lets you change your password quota -v                 # shows what your disk quota is date                     # shows the current date and time cal                      # shows the month's calendar uptime                   # shows current uptime w                        # displays whois online finger &lt;user&gt;            # displays information about user uname -a                 # shows kernel information head -n1 /etc/issue      # show linux distri­bution mount                    # shows mounted filesy­stems man &lt;command&gt;            # shows the manual for specified command df                       # shows disk usage df -h                    # shows disk usage in human readable format du &lt;filename&gt;            # shows the disk usage of the files and directories in filename  du -hs                   # shows the total disk usage of the folder in human readable format lscpu                    # gives information about the cpu last &lt;yourUsername&gt;      # lists your last logins ps -u yourusername       # lists your processes kill &lt;PID&gt;               # kills the processes with the ID you gave killall &lt;processname&gt;    # kill all processes with the name top                      # displays your currently active processes htop                     # displays your currently active processes with nicer graphics lsof                     # lists open files bg                       # lists stopped or background jobs ; resume a stopped job in the background fg                       # brings the most recent job in the foreground fg &lt;job&gt;                 # brings job to the foreground time &lt;command&gt;           # report time consumed by command execution   SSH Commands   ssh user@host            # connects to host as user ssh -p &lt;port&gt; user@host  # connects to host on specified port as user ssh-copy-id user@host    # adds your ssh key to host for user to enable a keyed or passwordless login   Netword Commands   ping &lt;host&gt;              # pings host and outputs results whois &lt;domain&gt;           # gets whois information for domain dig &lt;domain&gt;             # gets DNS information for domain dig -x &lt;host&gt;            # reverses lookup host wget &lt;file&gt;              # downloads file host &lt;server_name&gt;       # shows the IP of server_name and vice-versa (host &lt;ip&gt;) ip &lt;server_name&gt;         # shows the IP of server_name  scp /path/to/file user@server:/path/to/destination # Copy file from local directory to server directory scp user@remote_host:remote_file local_file        # download file: remote -&gt; local scp local_file user@remote_host:remote_file        # upload file: local -&gt; remote   Command-line Processing Cycle   # The default order for command lookup is functions, followed by built-ins, with scripts and executables last. # There are three built-ins that you can use to override this order: `command`, `builtin` and `enable`.  command  # removes alias and function lookup. Only built-ins and commands found in the search path are executed builtin  # looks up only built-in commands, ignoring functions and commands found in PATH enable   # enables and disables shell built-ins  eval     # takes arguments and run them through the command-line processing steps all over again   Input/Output Redirectors   cmd1 | cmd2 # pipe; takes standard output of cmd1 as standard input to cmd2 cmd1 &lt; cmd2 # takes standard output of cmd2 as file input to cmd1 &lt; file     # takes standard input from file &gt; file     # directs standard output to file &gt;&gt; file    # directs standard output to file; append to file if it already exists &gt;|file     # forces standard output to file even if noclobber is set n&gt;|file    # forces output to file from file descriptor n even if noclobber is set &lt;&gt; file    # uses file as both standard input and standard output n&lt;&gt;file    # uses file as both input and output for file descriptor n n&gt;file     # directs file descriptor n to file n&lt;file     # takes file descriptor n from file n&gt;&gt;file    # directs file description n to file; append to file if it already exists n&gt;&amp;        # duplicates standard output to file descriptor n n&lt;&amp;        # duplicates standard input from file descriptor n n&gt;&amp;m       # file descriptor n is made to be a copy of the output file descriptor n&lt;&amp;m       # file descriptor n is made to be a copy of the input file descriptor &amp;&gt;file     # directs standard output and standard error to file &lt;&amp;-        # closes the standard input &gt;&amp;-        # closes the standard output n&gt;&amp;-       # closes the ouput from file descriptor n n&lt;&amp;-       # closes the input from file descripor n cmd &gt; /dev/null      # discards stdout cmd &gt; /dev/null 2&gt;&amp;1 # discards both stdout and stderr cmd 2&gt; file # directs error output (stderr) of _cmd_ to _file_ cmd 1&gt;&amp;2    # directs stdout to same place as stderr cmd 2&gt;&amp;1    # directs stderr to same place as stdout cmd &amp;&gt; file # directs every output of cmd to file   |tee &lt;file&gt;# output command to both terminal and a file (-a to append to file)   Process Handling   # To suspend a job, type CTRL+Z while it is running. You can also suspend a job with CTRL+Y. # This is slightly different from CTRL+Z in that the process is only stopped when it attempts to read input from terminal. # Of course, to interrupt a job, type CTRL+C.  cmd1 ; cmd2  # runs cmd1 and then cmd2 cmd1 &amp;&amp; cmd2 # runs cmd2 if cmd1 is successful cmd1 || cmd2 # runs cmd2 if cmd1 is not successful cmd &amp;        # runs job in the background and prompts back the shell  jobs         # lists all jobs (use with -l to see associated PID)  fg           # brings a background job into the foreground fg %+        # brings most recently invoked background job fg %-        # brings second most recently invoked background job fg %N        # brings job number N fg %string   # brings job whose command begins with string fg %?string  # brings job whose command contains string  kill -l               # returns a list of all signals on the system, by name and number kill PID              # terminates process with specified PID kill -s SIGKILL 4500  # sends a signal to force or terminate the process kill -15 913          # ending PID 913 process with signal 15 (TERM) kill %1               # where %1 is the number of job as read from 'jobs' command. pkill _name_          # kills process with name _name_ killall _name_        # kills all processes with names beginning _name_  ps           # prints a line of information about the current running login shell and any processes running under it ps -a        # selects all processes with a tty except session leaders  trap cmd sig1 sig2  # executes a command when a signal is received by the script trap \"\" sig1 sig2   # ignores that signals trap - sig1 sig2    # resets the action taken when the signal is received to the default  disown &lt;PID|JID&gt;    # removes the process from the list of jobs  wait                # waits until all background jobs have finished sleep &lt;number&gt;      # wait # of seconds before continuing watch -n &lt;s&gt; '&lt;command&gt;' # Issue the &lt;command&gt; every &lt;s&gt; seconds and display output nohup sh custom-script.sh &amp; # Lauches custom-script.sh without trapping the screen  pv                  # display progress bar for data handling commands. often used with pipe like |pv yes                 # give yes response everytime an input is requested from script/process   AWK Commands   Profile Configuration: .bashrc   Sources   https://github.com/LeCoupa/awesome-cheatsheets/blob/master/languages/bash.sh   https://cheatography.com/davechild/cheat-sheets/linux-command-line/   https://github.com/LeCoupa/awesome-cheatsheets/blob/master/tools/ubuntu.sh   See Also   Learn X in Y minutes  ","categories": [],
        "tags": [],
        "url": "/references/cheatsheets/linux/",
        "teaser": "/assets/images/logos/logo_linux-tux.svg"
      },{
        "title": "Python",
        "excerpt":"Introduction      Python is an interpreted, high-level and general-purpose, dynamically typed programming language   It is also Object oriented, modular oriented and a scripting language.   In Python, everything is considered as an Object.   A python file has an extension of .py   Python follows Indentation to separate code blocks instead of flower brackets({}).   We can run a python file by the following command in cmd(Windows) or shell(mac/linux).   $ python &lt;filename.py&gt; or $ python3 &lt;filename.py&gt;   Create and execute a program      Open up a terminal/cmd   Create the program: nano/cat &gt; nameProgram.py   Write the program and save it   python nameProgram.py   Basic Datatypes                  Data Type       Description                       int       Integer values [0, 1, -2, 3]                 float       Floating point values [0.1, 4.532, -5.092]                 char       Characters [a, b, @, !, `]                 str       Strings [abc, AbC, A@B, sd!, `asa]                 bool       Boolean Values [True, False]                 complex       Complex numbers [2+3j, 4-1j]           Keywords   As of python3.8 there are 35 keywords:                  Keyword       Description       Category                       True       Boolean value for not False or 1       Value Keyword                 False       Boolean Value for not True or 0       Value Keyword                 None       No Value       Value keyword                 and       returns true if both (oprand) are true (other language &amp;&amp; )       Operator keyword                 or       returns true of either operands is true (other language || )       Operator keyword                 in       returns true if word is in iterator       Operator keyword                 is       returns true if id of variables are same       Operator keyword                 not       returns opposite Boolean value       Operator Keyword                 if       get into block if expression is true       conditional                 elif       for more than 1 if checks       conditional                 else       this block will be executed if condition is false       conditional                 for       used for looping       iteration                 while       used for looping       iteration                 break       get out of loop       iteration                 continue       skip for specific condition       iteration                 def       make user defined function       structure                 class       make user defined classes       structure                 lambda       make anonymous function       structure                 with       execute code within context manager’s scope       structure                 as       alias for something       structure                 pass       used for making empty structures(declaration)       structure                 return       get value(s) from function, get out of function       returning keyword                 yield       yields values instead of returning (are called generators)       returning keyword                 import       import libraries/modules/packages       import                 from       import specific function/classes from modules/packages       import                 try       this block will be tried to get executed       execption handling                 execpt       is any execption/error has occured it’ll be executed       execption handling                 finally       It’ll be executed no matter execption occurs or not       execption handling                 raise       throws any specific error/execption       execption handling                 assert       throws an AssertionError if condition is false       execption handling                 async       used to define asynchronous functions/co-routines       asynchronous programming                 await       used to specify a point when control is taken back       asynchronous programming                 del       deletes/unsets any user defined data       variable handling                 global       used to access variables defined outsied of function       variable handling                 nonlocal       modify variables from different scopes       variable handling           Operators                  Operator       Description                       ( )       grouping parenthesis, function call, tuple declaration                 [ ]       array indexing, also declaring lists etc.                 !       relational not, complement, ! a  yields true or false                 *       multiply, a * b                 /       divide, a / b                 %       modulo, a % b                 +       add, a + b                 -       subtract, a - b                 &lt;&lt;       shift left,  left operand is shifted left by right operand bits (multiply by 2)                 &gt;&gt;       shift right, left operand is shifted right by right operand bits (divide by 2)                 &lt;       less than, result is true or false,  a &lt; b                 &lt;=       less than or equal, result is true or false,  a &lt;= b                 &gt;       greater than, result is true or false,  a &gt; b                 &gt;=       greater than or equal, result is true or false, a &gt;= b                 ==       equal, result is true or false,  a == b                 !=       not equal, result is true or false,  a != b                 &amp;       bitwise and,  a &amp; b                 ^       bitwise exclusive or XOR,  a ^ b                 |       bitwise or,  a | b                 &amp;&amp;, and       relational and, result is true or false,  a &lt; b &amp;&amp; c &gt;= d                 ||, or       relational or, result is true or false,  a &lt; b || c &gt;= d                 =       store or assignment                 +=       add and store                 -=       subtract and store                 *=       multiply and store                 /=       divide and store                 %=       modulo and store                 &lt;&lt;=       shift left and store                 &gt;&gt;=       shift right and store                 ,       separator as in   ( y=x,z=++x )                 ~       bitwise not, ones complement, ~a                 -       unary minus, - a                 +       unary plus, + a                 &amp;=       bitwise and and store                 ^=       bitwise exclusive or and store                 |=       bitwise or and store           Basic Data Structures   List      List is a collection which is ordered and changeable. Allows duplicate members.   Syntax:     thislist = [\"apple\", \"banana\", \"cherry\"]            List items are ordered, changeable, and allow duplicate values.   List items are indexed, the first item has index [0], the second item has index [1] etc.   The list is changeable, meaning that we can change, add, and remove items in a list after it has been created.   To determine how many items a list has, use the len() function.   A list can contain different data types:     list1 = [\"abc\", 34, True, 40, \"male\"]           It is also possible to use the list() constructor when creating a new list     thislist = list((\"apple\", \"banana\", \"cherry\"))  # note the double round-brackets           Tuple      Tuple is a collection which is ordered and unchangeable. Allows duplicate members.   A tuple is a collection which is ordered and unchangeable.   Syntax:     thistuple = (\"apple\", \"banana\", \"cherry\")           Tuple items are ordered, unchangeable, and allow duplicate values.   Tuple items are indexed, the first item has index [0], the second item has index [1] etc.   When we say that tuples are ordered, it means that the items have a defined order, and that order will not change.   Tuples are unchangeable, meaning that we cannot change, add or remove items after the tuple has been created.   Since tuple are indexed, tuples can have items with the same value:   Tuples allow duplicate values:     thistuple = (\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\")           To determine how many items a tuple has, use the  len() function:     thistuple = (\"apple\", \"banana\", \"cherry\") print(len(thistuple))           To create a tuple with only one item, you have to add a comma after the item, otherwise Python will not recognize it as a tuple.     thistuple = (\"apple\",) print(type(thistuple)) #NOT a tuple thistuple = (\"apple\") print(type(thistuple))           It is also possible to use the tuple() constructor to make a tuple.     thistuple = tuple((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets print(thistuple)           Set     Set is a collection which is unordered and unindexed. No duplicate members.   A set is a collection which is both unordered and unindexed.     thisset = {\"apple\", \"banana\", \"cherry\"}           Set items are unordered, unchangeable, and do not allow duplicate values.   Unordered means that the items in a set do not have a defined order.   Set items can appear in a different order every time you use them, and cannot be referred to by index or key.   Sets are unchangeable, meaning that we cannot change the items after the set has been created.   Duplicate values will be ignored.   To determine how many items a set has, use the len() method.     thisset = {\"apple\", \"banana\", \"cherry\"} print(len(thisset))           Set items can be of any data type:     set1 = {\"apple\", \"banana\", \"cherry\"} set2 = {1, 5, 7, 9, 3} set3 = {True, False, False} set4 = {\"abc\", 34, True, 40, \"male\"}           It is also possible to use the set() constructor to make a set.     thisset = set((\"apple\", \"banana\", \"cherry\")) # note the double round-brackets           Dictionary     Dictionary is a collection which is unordered and changeable. No duplicate members.   Dictionaries are used to store data values in key:value pairs.   Dictionary items are presented in key:value pairs, and can be referred to by using the key name.     thisdict = { \"brand\": \"Ford\", \"model\": \"Mustang\", \"year\": 1964 } print(thisdict[\"brand\"])           Dictionaries are changeable, meaning that we can change, add or remove items after the dictionary has been created.   Dictionaries cannot have two items with the same key.   Duplicate values will overwrite existing values.   To determine how many items a dictionary has, use the len() function.     print(len(thisdict))           The values in dictionary items can be of any data type     thisdict = { \"brand\": \"Ford\", \"electric\": False, \"year\": 1964, \"colors\": [\"red\", \"white\", \"blue\"] }           Flow Control   Conditional       if condition:         &lt;commands&gt;     elif condition2:         &lt;commands&gt;     else:         &lt;commands&gt;   Loops   For loop      A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).   This is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.   With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.     fruits = [\"apple\", \"banana\", \"cherry\"] for x in fruits:   print(x)           The for loop does not require an indexing variable to set beforehand.   To loop through a set of code a specified number of times, we can use the range() function.            The range(b,e,i) function returns a sequence of numbers, starting from b (0 as default), and increments by i (1 by default), and ends at number e.       The else keyword in a for loop specifies a block of code to be executed when the loop is finished.           A nested loop is a loop inside a loop. The “inner loop” will be executed one time for each iteration of the “outer loop”:     adj = [\"red\", \"big\", \"tasty\"] fruits = [\"apple\", \"banana\", \"cherry\"] for x in adj:   for y in fruits:       print(x, y)           While loop      With the while loop we can execute a set of statements as long as a condition is true.   Example: Print i as long as i is less than 6     i = 1 while i &lt; 6:   print(i)   i += 1           The while loop requires relevant variables to be ready, in this example we need to define an indexing variable, i, which we set to 1.   With the break statement we can stop the loop even if the while condition is true   With the continue statement we can stop the current iteration, and continue with the next.   With the else statement we can run a block of code once when the condition no longer is true.   Functions   Definition  def function_name():     return   Call   function_name()     We need not to specify the return type of the function.   Functions by default return None   We can return any datatype.   Source   See Also   Learn X in Y minutes  ","categories": [],
        "tags": [],
        "url": "/references/cheatsheets/python/",
        "teaser": "/assets/images/logos/logo_python.svg"
      },{
        "title": "Databanks",
        "excerpt":"DATCOM      Release Type: open-source   Description: The computer program calculates static stability, high lift and control, and dynamic derivative characteristics using the methods contained in the USAF Stability and Control Datcom (Data Compendium).   System: Linux, Windows, and Mac   Documentation   References   Utilities:            Matlab drawDATCOMaircraft       Matlab digital DATCOM          ","categories": [],
        "tags": [],
        "url": "/sources-software/software_databanks/",
        "teaser": "/assets/images/stock/thumbs/claudia-wolff-MiJTU6lqksg-unsplash.jpg"
      },{
        "title": "Geometry",
        "excerpt":"Salome     Release Type: Open Source   Description: SALOME is open-source software that provides a generic Pre- and Post-Processing platform for numerical simulation. It is based on an open and flexible architecture made of reusable components.   System: Linux and Windows   OpenCascade     Release Type: Open Source   Description: OpenCascade is a CAD processor for geometry simplification, reparation, wrapping and conversion.   System: Linux and Windows   ","categories": [],
        "tags": [],
        "url": "/sources-software/software_geometry/",
        "teaser": "/assets/images/stock/thumbs/sven-mieke-fteR0e2BzKo-unsplash.jpg"
      },{
        "title": "Mesh",
        "excerpt":"Gmsh     Release Type: Open Source   Description: Gmsh is an open-source 3D finite element mesh generator with a built-in CAD engine and post-processor.    System: Linux and Windows  ","categories": [],
        "tags": [],
        "url": "/sources-software/software_mesh/",
        "teaser": "/assets/images/stock/thumbs/t-h-chia-1-Zr2ye5588-unsplash.jpg"
      },{
        "title": "Post-Processing",
        "excerpt":"Paraview     Release Type: open-source   Description:    System: Linux, Windows, and Mac   Tutorial / Manual   GNUplot     Release Type: open-source   Description: Gnuplot is a portable command-line-driven graphing utility.   System: Linux, Windows, and Mac   Documentation   OpenOffice     Release Type: open-source   Description: Free alternative to Microsoft Office.   System: Linux, Windows, and Mac   Tutorial / Manual   Octave     Release Type: open-source   Description: Scientific Programming Language, open-source alternative to Matlab.   System: Linux, Windows, and Mac   Tutorial / Manual   ","categories": [],
        "tags": [],
        "url": "/sources-software/software_post-processing/",
        "teaser": "/assets/images/stock/thumbs/daniele-levis-pelusi-l9H7FkGjpAE-unsplash.jpg"
      },{
        "title": "Reporting",
        "excerpt":"Miktex     Release Type: open-source   Description: MiKTeX (pronounced mick-tech) is an implementation of TeX/LaTeX and related programs   System: Linux, Windows, and Mac   Documentation   Latex Project   Latex Wiki   OpenOffice     Release Type: open-source   Description: Free alternative to Microsoft Office.   System: Linux, Windows, and Mac   Tutorial / Manual  ","categories": [],
        "tags": [],
        "url": "/sources-software/software_reporting/",
        "teaser": "/assets/images/stock/thumbs/lauren-mancke-aOC7TSLb1o8-unsplash.jpg"
      },{
        "title": "Code Repositories",
        "excerpt":"Code Projects     Release Type: open-source   Code Utility Software Library     Release Type: open-source   Description: Previously Aerodynamics Division Software Library at NASA Ames Research Center, the CFD Utility Software Library (previously known as the Aerodynamics Division Software Library at NASA Ames Research Center) contains nearly 30 libraries of generalized subroutines and close to 100 applications built upon those libraries. These utilities have accumulated during four decades or so of software development in the aerospace field.   System: Linux, Windows, and Mac   Tutorial / Manual: in the download files   PDAS     Public Domain Aeronautical Software (PDAS)   Release Type: open-source   UIUC Airfoil Coordinates Database     Release Type: open-source   Description: Around 1600 airfoils listed for download.   Matlab Central     Release Type: open-source   Digital Library of Mathematical Functions     Release Type: open-source   Description: Repository containing hundreds of mathematical formulas.   LAPACK     Linear Algebra Package   Release Type: open-source   Description: Repository containing hundreds of routines written in Fortran 90 for solving systems of simultaneous linear equations, least-squares solutions of linear systems of equations, eigenvalue problems, and singular value problems.   Fortran 95 interface   LAPACK++     Linear Algebra Package (C++ implementation)   Release Type: open-source   Description: Repository containing hundreds of routines written in C++ for solving systems of simultaneous linear equations, least-squares solutions of linear systems of equations, eigenvalue problems, and singular value problems.   BLAS     Basic Linear Algebra Subprograms   Release Type: open-source   Description: Repository of routines that provide standard building blocks for performing basic vector and matrix operations.   ","categories": [],
        "tags": [],
        "url": "/sources-software/software_repositories/",
        "teaser": "/assets/images/stock/thumbs/chris-robert-KBRbLh3RBkI-unsplash.jpg"
      },{
        "title": "Solvers",
        "excerpt":"Panel Methods   XFOIL      Release Type: open-source   Description: XFOIL is an interactive program for the design and analysis of subsonic isolated airfoils.   System: Linux, Windows and Mac   Tutorial / Manual   MSES      Release Type: Commercial   Description: The MSES system is a collection of programs for the analysis and design of single- or multi-element airfoils.   System: Linux and Windows   Tutorial / Manual   MISES      Release Type: Commercial   Description: The MISES system is a collection of programs for cascade analysis and design.   System: Linux and Windows   Tutorial / Manual   MTFLOW      Release Type: Commercial   Description: The MTFLOW (Multielement Through-FLOW) system is a collection of programs for the analysis and design of single- or multi-element axisymmetric bodies and ducts.   System: Linux and Windows   Tutorial / Manual 1   Tutorial / Manual 2   XFLR5      Release Type: open-source   Description: XFLR5 is an analysis tool for airfoils, wings, and planes operating at low Reynolds Numbers.   System: Windows   ASWING      Release Type: Commercial   Description: ASWING is a software program for the aerodynamic, structural, and control-response analysis of aircraft with flexible wings and fuselages of high to moderate aspect ratio.   System: Linux and Windows   Tutorial / Manual   Tornado      Release Type: open-source   Description: Tornado is a Vortex Lattice Method for linear aerodynamic wing design applications in conceptual aircraft design or in aeronautical education.   System: Linux, Windows, and Mac   Documentation   Tutorials   Full Potential Methods   BLWF58      Release Type: Commercial   Description: Full potential 3D flow solver focused on aircraft geometry.   System: Windows   Presentation   Demonstration   Student version   PANAIR      Release Type: Opensource   Description: PANAIR (an abbreviation for “panel aerodynamics”) is a state-of-the-art computer program developed to predict inviscid subsonic and supersonic flows about an arbitrary configuration by means of a higher-order panel method.   System: Linux, Windows, and Mac   Tutorial / Manual   RANS Solvers   OpenFOAM      Release Type: open-source   Description:   System: Linux, Windows, and Mac   Documentation   Tutorial / Manual   SU2      Release Type: open-source   Description:   System: Linux, Windows, and Mac   Documentation   Tutorial / Manual   TLNS3D      Release Type: open-source   Description: This software was developed to solve Reynolds-averaged Navier-Stokes Equations to simulate turbulent, viscous flows over three-dimensional configurations. A general multiblock grid is used to model complex configurations. A multi-stage Runge-Kutta pseudo-time stepping scheme is coupled with residual smoothing and multigrid acceleration techniques to form an efficient algorithm.   System: Linux, Windows, and Mac   CFL3D      Release Type: open-source for US citizens   Description:   System: Linux, Windows, and Mac   Documentation   Tutorial / Manual  ","categories": [],
        "tags": [],
        "url": "/sources-software/software_solvers/",
        "teaser": "/assets/images/stock/thumbs/fotis-fotopoulos-LJ9KY8pIH3E-unsplash.jpg"
      },{
        "title": "Tools",
        "excerpt":"Tools   BLWF Toolkit     Tools:            Airfoil Smooth       Airfoil Editor       Cp Editor 3D       Cp Editor 2D       RefValues       Clift(N)       Panel_2D       InfSWing       JoukowskiAF_BL       FOX toolkit           Ubuntu for Windows (WSL)     Release Type: open-source   Description: Ubuntu on Windows allows one to use Ubuntu Terminal and run Ubuntu command line utilities including bash, ssh, git, apt and many more.   System: Windows   Tutorial / Manual   Notepad++     Release Type: open-source   Description: Notepad++ is a free source code editor and Notepad replacement that supports several languages.    System: Windows   Tutorial / Manual   WinMerge     Release Type: open-source   Description: WinMerge is an open-source differencing and merging tool for Windows.    System: Windows   Tutorial / Manual   Engauge Digitizer     Release Type: open-source   Description: The Engauge Digitizer tool accepts image files (like PNG, JPEG, and TIFF) containing graphs, and recovers the data points from those graphs.   System: Linux, Windows, and Mac   Tutorial / Manual  ","categories": [],
        "tags": [],
        "url": "/sources-software/software_tools/",
        "teaser": "/assets/images/stock/thumbs/todd-quackenbush-IClZBVw5W5A-unsplash.jpg"
      },{
        "title": "Aerospace - External Aerodynamics",
        "excerpt":"2D Cases   NACA-0012 Airfoil     Experimental data: publically available   Grids: publically available   Numerical results: publically available   Cases:            M = 0.15       Re = 6E6       AoA = -17.3deg. to +17.3deg.           NACA-4412 Airfoil     Objective: Trailing edge separation.   Experimental data: publically available   Grids: publically available   Numerical results: publically available   Case:            M = 0.09       Re = 1.52E6       AoA = 13.87 deg.           RAE-2822 Airfoil     Experimental data: publically available   Grids: publically available   Numerical results: publically available   Case:            M = 0.725       Re = 6.5E6       AoA = 2.92 deg.           NLR Airfoil with Flap     Experimental data: publically available   Grids: publically available   Numerical results: publically available   Cases:            M = 0.20                           P = 14.7 Psia                       T = 520 R       AoA = 10 deg.           Axisymmetric SWBLI near M=7     Experimental data: publically available   Grids: not available   Numerical results: publically available   Case:            M = 7.11       Re = 57060 per cm       AoA = 20 deg.           3D Cases   Onera M6 Wing     Experimental data: publically available   Grids: not available   Numerical results: publically available   Case:            M = 0.8395       Re = 11.72E6       AoA = 3.06 deg.           CFL3D site   ARA M100 Wing-Bodyite     Experimental data: publically available   Grids: not available   Numerical results: publically available   Case:            M = 0.8027       Re = 13.1E6       AoA = 2.873 deg.           Delta Wing     Experimental data: publically available   Grids: not available   Numerical results: publically available   Case:            M = 0.3       Re = 0.5E6       AoA = 20.5 deg.           DPW Series   DPW-1     Experimental data: publically available   Grids: not available   Numerical results: publically available   Case:            M = 0.8395       Re = 11.72E6       AoA = 3.06 deg.           DPW-2     2nd AIAA CFD Drag Prediction Workshop   Model: DLR-F6   Experimental data: publically available   Grids: publically available   Numerical results: publically available   Cases (required):            Single point grid convergence study for wb and wbpn                    M = 0.75           Re = 3E6 (c=141.2 mm)           CL = .500 ± .001           “Fully turbulent” solution                       Drag Polar for wb and wbpn                    M = 0.75           Re = 3E6 (c=141.2 mm)           AoA (deg.) = -3°, -2°, -1.5°, -1°,0°, 1°, 1.5°           Boundary layer transition or “fully turbulent”                           Cases (optional):            Comparison of “tripped” and “fully turbulent” solutions                    M = 0.75           Re = 3E6 (c=141.2 mm)           CL = .500 ± .001                       Drag rise for for wb and wbpn (very optional)                    M = 0.50, 0.60, 0.70, 0.72, 0.74, 0.75, 0.76, 0.77           CL = 0.500 ± .001                           DPW-3     3rd AIAA CFD Drag Prediction Workshop   Model: DLR-F6   Experimental data: publically available   Grids: publically available   Numerical results: publically available   Cases            DLR-F6 wb with and without FX2B fairing                    For all cases                            Re = 5E6 (cref = 141.2 mm)               T = 580R (322.22 K)                                   DLR-F6 wb with FX2B fairing and without fairing                            Grid convergence study                                    M = 0.75                   CL = 0.500 ±0.001                                               Drag polar (medium grid)                                    M = 0.75                   AoA = -3, -2, -1, -0.5, 0, 0.5, 1, 1.5 deg.                                                                               Wing alone comparison: DPW-W1 (baseline) vs. DPW-W2 (simple optimization)                    Re = 5E6 (cref = 197.556 mm)           T = 580R (322.22 K)           M = 0.76           Grid convergence                            AoA = 0.5 deg.                                   Drag polar (medium grid)                            AoA = -1, 0, 0.5, 1, 1.5, 2, 2.5, 3 deg.                                                   DPW-4     4th AIAA CFD Drag Prediction Workshop   Model: NASA Common Research Model (CRM)   Experimental data: publically available   Grids: publically available   Numerical results: publically available   Cases:            Grid convergence and downwash studies:                    M=0.85           Re = 5E6 (cref = 275.80 in)           T = 100F           Grid convergence study                            CL=0.500 ±0.001                                   Downwash study                            Drag Polars for AoA = 0.0, 1.0, 1.5, 2.0, 2.5, 3.0, 4.0 deg.               Trimmed drag polar (cg at reference center) derived from polars at iH = -2, 0, +2 deg.               Delta drag polar of tail off vs. tail on (i.e. wb vs. wbh trimmed)                                               Mach sweep study (optional):                    Re = 5E6 (cref = 275.80 in)           T = 100F           Drag Polars at M = 0.70, 0.75, 0.80, 0.83, 0.85, 0.86, 0.87           Drag rise curves at CL = 0.400, 0.450, 0.500 (±0.001 or extracted from polars)                       Reynolds number study (optional):                    Compare Re = 5E6 results with Re = 20E6 results (cref = 275.80 in)           M = 0.85           CL = 0.500 ±0.001           T = -250F (for Re = 20E6)                           DPW-5     5th AIAA CFD Drag Prediction Workshop   Model: NASA Common Research Model (CRM)   Experimental data: publically available   Grids: publically available   Numerical results: publically available   Cases:            Wing-body grid convergence study:                    M = 0.85           CL = 0.500 ±0.001           Re = 5E6 (cref = 275.80 in)           T = 100F           Provided grid series (required)           Participant developed grids (optional)                       Wing-body buffet study:                    M = 0.85           Drag polar for AoA = 2.50, 2.75, 3.00, 3.25, 3.50, 3.75, 4.00 deg.           Re = 5E6 (cref = 275.80 in)           T = 100F                           DPW-6     6th AIAA CFD Drag Prediction Workshop   Model: NASA Common Research Model (CRM)   Experimental data: publically available   Grids: publically available   Numerical results: publically available   Cases:            M = 0.85       Re = 5E6       CL = 0.5 ±0.001           DPW-7     7th AIAA CFD Drag Prediction Workshop   Model: NASA Common Research Model (CRM)   Experimental data: publically available   Grids: publically available   Numerical results: publically available   Cases:            Required                    Case 1: Grid Convergence Study           Case 2: Alpha Sweeps at Constant Re           Case 3: Re Sweep at Constant CL                       Optional                    Case 4: Solution-Adapted Grid           Case 5: Beyond RANS: URANS, DDES, WMLES, Lattice-Boltzmann, etc.           Case 6: Coupled Aero-Structural Simulation                           HLPW Series   HLPW-1     1st AIAA CFD High Lift Prediction Workshop   Model: NASA Trap Wing   Experimental data: publically available   Grids: publically available   Numerical results: publically available   Cases   HLPW-2     2nd AIAA CFD High Lift Prediction Workshop   Model: DLR F-11   Experimental data: publically available   Grids: publically available   Numerical results: publically available   Cases   HLPW-3     3rd AIAA CFD High Lift Prediction Workshop   Model: JAXA JSM   Experimental data: publically available   Grids: publically available   Numerical results: publically available   Cases   HLPW-4     4th AIAA CFD High Lift Prediction Workshop   Model: NASA CRM-HL   Experimental data: publically available   Grids: publically available   Numerical results: publically available   Cases   ","categories": [],
        "tags": [],
        "url": "/sources-testcases/testcases_aerospace_external-aerodynamics/",
        "teaser": "/assets/images/stock/thumbs/pexels-pixabay-40753.jpg"
      },{
        "title": "Aerospace - Internal Aerodynamics",
        "excerpt":" ","categories": [],
        "tags": [],
        "url": "/sources-testcases/testcases_aerospace_internal-aerodynamics/",
        "teaser": "/assets/images/stock/thumbs/lawrence-hookham-bAtq2Yt7SBk-unsplash.jpg"
      },{
        "title": "Aerospace - Thermodynamics",
        "excerpt":" ","categories": [],
        "tags": [],
        "url": "/sources-testcases/testcases_aerospace_thermodynamics/",
        "teaser": "/assets/images/stock/thumbs/luka-slapnicar-yqeXLR81Uj0-unsplash.jpg"
      },{
        "title": "Automotive - External Aerodynamics",
        "excerpt":"3D Cases   Ahmed Body     Experimental data: publically available   Grids: not available   Numerical results: publically available   DriveAir     Experimental data: not publically available   Grids: not available   Numerical results: publically available  ","categories": [],
        "tags": [],
        "url": "/sources-testcases/testcases_automotive_external-aerodynamics/",
        "teaser": "/assets/images/stock/thumbs/todd-jiang-4YKx90d8FUE-unsplash.jpg"
      },{
        "title": "Automotive - Internal Aerodynamics",
        "excerpt":" ","categories": [],
        "tags": [],
        "url": "/sources-testcases/testcases_automotive_internal-aerodynamics/",
        "teaser": "/assets/images/stock/thumbs/spencer-davis-yY9n0N4P_oY-unsplash.jpg"
      },{
        "title": "Automotive - Thermodynamics",
        "excerpt":" ","categories": [],
        "tags": [],
        "url": "/sources-testcases/testcases_automotive_thermodynamics/",
        "teaser": "/assets/images/stock/thumbs/fpvmat-a-sFPoi1s-1Eo-unsplash.jpg"
      },{
        "title": "Repositories",
        "excerpt":"LARC     Langley Research Center - Turbulence Modeling Resource   NPARC     NPARC Alliance Verification and Validation Archive   CFL3D Test/Validation Cases     Test cases used in the CFL3D validation.   ERCOFTA     European Research Community on Flow, Turbulence and Combustion   AGARD     Fluid Dynamics Panel of AGARD   JHTDB     Johns Hopkins Turbulence Database   THTLAB     Turbulence and Heat Transfer Laboratory (THTLAB)   DNS database   Oden     Oden Institute for Computational Engineering and Sciences   University of Texas   UPM     Fluid Dynamics Group - Universidad Politecnica de Madrid   KTH     Department of Mechanics - KTH Royal Institute of Technology   Boundary Layer DNS/LES Data   Kawamura Lab     DNS database of Wall Turbulence and Heat Transfer   TU Darmstadt     Fachgebiet für Strömungsdynamik - Technische Universität Darmstadt   Turbulence DNS database  ","categories": [],
        "tags": [],
        "url": "/sources-testcases/testcases_repositories/",
        "teaser": "/assets/images/stock/thumbs/chris-robert-KBRbLh3RBkI-unsplash.jpg"
      }]
